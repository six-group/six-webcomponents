class r{constructor(){this.eventListeners=[],this.add=(e,t,n,s=null)=>{this.eventListeners.push({el:e,name:t,listener:n,identifier:s}),e.addEventListener(t,n)},this.remove=(e,t,n)=>{this.eventListeners=this.getFilteredEventListeners(s=>s.listener==n&&s.el===e&&s.name===t)},this.removeByIdentifier=e=>{const t=s=>s.identifier===e;this.eventListeners.find(t)!==void 0&&(this.eventListeners=this.getFilteredEventListeners(t))},this.removeAll=()=>{for(;this.eventListeners.length>0;){const e=this.eventListeners.pop();e!=null&&e.el.removeEventListener(e.name,e.listener)}}}getFilteredEventListeners(e){return this.eventListeners.filter(t=>e(t)?(t.el.removeEventListener(t.name,t.listener),!1):!0)}forward(e,t,n){switch(t){case"input":this.add(n,e,()=>n.dispatchEvent(new InputEvent(t,{bubbles:!0,cancelable:!0})));break;case"change":this.add(n,e,()=>n.dispatchEvent(new InputEvent(t,{bubbles:!0,cancelable:!0})));break;case"blur":this.add(n,e,()=>n.dispatchEvent(new FocusEvent(t,{bubbles:!0,cancelable:!0})));break;case"focus":this.add(n,e,()=>n.dispatchEvent(new FocusEvent(t,{bubbles:!0,cancelable:!0})));break}}}export{r as E};
