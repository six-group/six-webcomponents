import{_ as i,c as a,o as e,d as t}from"./chunks/framework.CeCHhCvu.js";const c=JSON.parse('{"title":"Angular","description":"","frontmatter":{},"headers":[],"relativePath":"guide/angular.md","filePath":"guide/angular.md","lastUpdated":1759328207000}'),n={name:"guide/angular.md"};function l(p,s,o,r,h,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="angular" tabindex="-1">Angular <a class="header-anchor" href="#angular" aria-label="Permalink to &quot;Angular&quot;">​</a></h1><p>We provide a <a href="https://www.npmjs.com/package/@six-group/ui-library-angular" target="_blank" rel="noreferrer">dedicated npm package for Angular</a>, designed to simplify the utilization of our web components. Check out the instructions in this guide to learn how to use it.</p><p>For additional assistance with the implementation, you can also examine the <a href="https://six-group.github.io/six-webcomponents/demo/angular" target="_blank" rel="noreferrer">Angular demo</a> and its <a href="https://github.com/six-group/six-webcomponents/tree/main/examples/angular" target="_blank" rel="noreferrer">accompanying code</a>.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><ol><li><p>Install the web components and the angular library:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @six-group/ui-library</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @six-group/ui-library-angular</span></span></code></pre></div></li></ol><h3 id="with-standalone-bootstrapping" tabindex="-1">With Standalone Bootstrapping <a class="header-anchor" href="#with-standalone-bootstrapping" aria-label="Permalink to &quot;With Standalone Bootstrapping&quot;">​</a></h3><p>This section explains how to configure web-components in an Angular application that uses <a href="https://angular.dev/reference/migrations/standalone#switch-to-standalone-bootstrapping-api" target="_blank" rel="noreferrer">standalone bootstrapping api</a>. Check below for configuring web components with Angular modules.</p><ol><li><p>Add <code>UiLibraryAngularModule</code> to your <code>ApplicationsConfig</code>s providers</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { UiLibraryAngularModule } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@six-group/ui-library-angular&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ApplicationConfig, importProvidersFrom } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@angular/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> appConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importProvidersFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UiLibraryAngularModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li><p>Import the SIX styles to your global <code>styles.scss</code> file (usually located at <code>src/styles.scss</code>):</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@six-group/ui-library/dist/ui-library/ui-library.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>In each standalone component, import the <code>UiLibraryAngularModule</code> module to get access to web-components components.</p><div class="language-angular-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">angular-html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Component({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  selector: &quot;some&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: [UiLibraryAngularModule],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  templateUrl: &quot;./some.component.html&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  styleUrl: &quot;./some.component.scss&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export class SomeComponent {}</span></span></code></pre></div></li></ol><h3 id="with-module-bootstrapping" tabindex="-1">With Module Bootstrapping <a class="header-anchor" href="#with-module-bootstrapping" aria-label="Permalink to &quot;With Module Bootstrapping&quot;">​</a></h3><p>This section explains how to configure web-components in an Angular application that uses NgModule.</p><ol><li><p>Add <code>UiLibraryAngularModule.forRoot()</code> to your root angular module imports section.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NgModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declarations: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imports: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   UiLibraryAngularModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li><li><p>If your project contains child modules, add the <code>UiLibraryAngularModule</code> (without the <code>forRoot()</code>) to those too.</p></li><li><p>Import the SIX styles to your global <code>styles.scss</code> file (usually located at <code>src/styles.scss</code>):</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@six-group/ui-library/dist/ui-library/ui-library.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ol><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>The Angular library provides the ability to customise some of its behaviour when initialising it</p><h3 id="automatic-required-when-using-formcontrol-and-validators-required" tabindex="-1">Automatic <code>required</code> when using <code>FormControl</code> and <code>Validators.required</code> <a class="header-anchor" href="#automatic-required-when-using-formcontrol-and-validators-required" aria-label="Permalink to &quot;Automatic \`required\` when using \`FormControl\` and \`Validators.required\`&quot;">​</a></h3><p>Instead of having to specify the <code>required</code> flag property on the component, the flag can be automatically applied whenever a <code>FormControl</code> is used and the <code>Validators.required</code> validator is applied.</p><p>So instead of doing:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// my-component.component.html</span></span>
<span class="line"><span>&lt;six-input [formControl]=&quot;formControl&quot; [required]=&quot;true&quot;&gt;&lt;/six-input&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// my-component.component.ts</span></span>
<span class="line"><span>@Component({</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>export class MyComponent {</span></span>
<span class="line"><span>  formControl = new FormControl&lt;string&gt;(&#39;&#39;, Validators.required);</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>when initialising the library pass the <code>showAsteriskOnRequiredValidator</code> property like so:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>UiLibraryAngularModule.forRoot({</span></span>
<span class="line"><span>  showAsteriskOnRequiredValidator: true</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>Now your component will apply the required flag automatically, without requiring you to set it manually:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// my-component.component.html</span></span>
<span class="line"><span>&lt;six-input [formControl]=&quot;formControl&quot;&gt;&lt;/six-input&gt; // &lt;-- [required] prop can be omitted</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// my-component.component.ts</span></span>
<span class="line"><span>@Component({</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>export class MyComponent {</span></span>
<span class="line"><span>  formControl = new FormControl&lt;string&gt;(&#39;&#39;, Validators.required);</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="using-the-components" tabindex="-1">Using the Components <a class="header-anchor" href="#using-the-components" aria-label="Permalink to &quot;Using the Components&quot;">​</a></h2><p>The components can be utilized just like any other Angular component. However, there&#39;s one caveat: while you&#39;ll receive code completion for attributes/properties of the component, code completion for events provided by the components is currently unavailable. Please check the <a href="./../components/six-alert.html">components documentation</a> for available events.</p><h2 id="forms" tabindex="-1">Forms <a class="header-anchor" href="#forms" aria-label="Permalink to &quot;Forms&quot;">​</a></h2><p>Form components like <code>six-input</code> work seamlessly in <a href="https://angular.io/guide/forms-overview" target="_blank" rel="noreferrer">Angular forms</a>, both in template-driven and reactive forms.</p><p>An objective of the SIX library is to ensure a consistent look and feel across all applications. Hence, the SIX Library takes on the responsibility of displaying error messages, when appropriate. For instance, it avoids displaying the message if the form is pristine, even if a field is marked as invalid.</p><h3 id="error-message-translations" tabindex="-1">Error Message Translations <a class="header-anchor" href="#error-message-translations" aria-label="Permalink to &quot;Error Message Translations&quot;">​</a></h3><p>To select the correct translation, your need to set the <code>lang</code> attribute on the <code>html</code> element. Supported languages are <code>en</code>, <code>de</code>, <code>it</code> and <code>fr</code>. Refer to the <a href="https://github.com/six-group/six-webcomponents/blob/main/examples/angular/src/app/components/header/header.component.ts#L27" target="_blank" rel="noreferrer">Angular example</a> for a concrete implementation.</p><h3 id="form-directive" tabindex="-1">Form Directive <a class="header-anchor" href="#form-directive" aria-label="Permalink to &quot;Form Directive&quot;">​</a></h3><p>From a <a href="https://www.bennadel.com/blog/4419-the-user-experience-ux-of-disabled-form-buttons.htm" target="_blank" rel="noreferrer">usability standpoint</a>, we consider that users should always be allowed to submit a form, even if it contains invalid values The library comes with an additional utility to aid in the process of displaying errors after the user clicked on the submit button.</p><p>The <code>SixFormDirective</code> provides a way to set all fields as dirty and touched, and focusing on the first field that contains an error.</p><p>To use it, simply add the <code>sixForm</code> directive and replace <code>ngSubmit</code> with <code>sixSubmit</code>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- add sixForm and replace (ngSubmit) with (sixSubmit) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sixForm</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> (sixSubmit)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onSubmit()&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> [formGroup]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> [submit]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Submit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Consult the <a href="https://github.com/six-group/six-webcomponents/tree/main/examples/angular" target="_blank" rel="noreferrer">Angular example</a> and the <a href="https://github.com/six-group/six-webcomponents/blob/main/libraries/ui-library-angular/src/lib/form/six-form.directive.ts" target="_blank" rel="noreferrer">source code documentation</a> of the <code>SixFormDirective</code> and for a more flexible alternative, the <code>SixFormUtilDirective</code>.</p><h2 id="sidebar" tabindex="-1">Sidebar <a class="header-anchor" href="#sidebar" aria-label="Permalink to &quot;Sidebar&quot;">​</a></h2><p>The library provides Angular Router integration for the sidebar component through a set of directives that automatically manage the selection and expansion states based on the current route.</p><p>To enable router integration, add the <code>sixRouterLinkActive</code> attribute to the <code>six-sidebar</code> component. This activates three directives that work together:</p><ul><li><code>ActiveSidebarDirective</code>: Enables route-based navigation in the sidebar</li><li><code>ActiveSidebarItemDirective</code>: Automatically manages item selection based on the current route</li><li><code>ActiveSidebarItemGroupDirective</code>: Automatically expands groups when they contain active routes</li></ul><p>Example usage:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- add sixRouterLinkActive to six-sidebar to include the sidebar helper directives --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;left&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> [open]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;open&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sixRouterLinkActive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item-group</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> routerLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Home&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item-group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item-group</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> routerLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/form&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Form&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assignment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item-group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item-group</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;settings&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Settings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> routerLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/settings/data&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;analytics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Data&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> routerLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/settings/history&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;history&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;History&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar-item-group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">six-sidebar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>When the router integration is enabled:</p><ul><li>Sidebar items are automatically selected when their route is active</li><li>Sidebar groups automatically expand when containing active routes</li><li>Manual selection state is preserved when no routes are active</li></ul><p>Consult the <a href="https://github.com/six-group/six-webcomponents/tree/main/examples/angular" target="_blank" rel="noreferrer">Angular example</a> and the <a href="https://github.com/six-group/six-webcomponents/blob/main/libraries/ui-library-angular/src/lib/sidebar/active-sidebar.directive.ts" target="_blank" rel="noreferrer">source code documentation</a> of the <code>ActiveSidebarDirective</code>, <code>ActiveSidebarItemDirective</code> and <code>ActiveSidebarItemGroupDirective</code>.</p>`,43)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
