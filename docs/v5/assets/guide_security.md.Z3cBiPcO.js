import{_ as t,c as r,o as s,d as n}from"./chunks/framework.CeCHhCvu.js";const h=JSON.parse('{"title":"Security","description":"","frontmatter":{},"headers":[],"relativePath":"guide/security.md","filePath":"guide/security.md","lastUpdated":1761811658000}'),o={name:"guide/security.md"};function i(a,e,c,l,u,d){return s(),r("div",null,e[0]||(e[0]=[n('<h1 id="security" tabindex="-1">Security <a class="header-anchor" href="#security" aria-label="Permalink to &quot;Security&quot;">â€‹</a></h1><p>SIX Web Components work well in environments with a <strong>Content Security Policy (CSP)</strong>. Since they are built with <a href="https://stenciljs.com/docs/csp-nonce" target="_blank" rel="noreferrer">Stencil</a>, they support CSP nonces out of the box and can be used in projects with strict security headers.</p><p>A <strong>CSP</strong> defines which scripts, styles, images, and other resources the browser may load. Using nonces (random tokens generated per request) makes it possible to set up a <strong>strict CSP</strong>: only resources with the matching nonce will run, which effectively blocks unwanted or injected code.</p><p>To use SIX Web Components in such a setup:</p><ul><li>Configure a <a href="https://web.dev/articles/strict-csp" target="_blank" rel="noreferrer">strict CSP with nonces</a>.</li><li>Pass the nonce from your server to Stencil via <code>setNonce(...)</code>.</li><li>In Angular projects, also check the <a href="https://angular.dev/best-practices/security" target="_blank" rel="noreferrer">Angular security best practices</a>.</li></ul>',5)]))}const _=t(o,[["render",i]]);export{h as __pageData,_ as default};
