/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AlertType } from "./components/six-alert/six-alert";
import { EmptyPayload } from "./utils/types";
import { SixDateFormats } from "./components/six-datepicker/six-date-formats";
import { SixDatepickerSelectPayload } from "./components/six-datepicker/six-datepicker";
import { SixMenuItemData } from "./components/six-menu/six-menu";
import { SixDropdownAsyncFilterPayload, SixDropdownAutoFilterPayload, SixDropdownScrollPayload } from "./components/six-dropdown/six-dropdown";
import { SixFileListDownloadPayload, SixFileListRemovePayload } from "./components/six-file-list-item/six-file-list-item";
import { SixFileUploadFailurePayload, SixFileUploadSuccessPayload } from "./components/six-file-upload/six-file-upload";
import { SixHeaderAppSwitcherSelectPayload, SixHeaderProfileSelectPayload, SixHeaderSearchFieldToggle } from "./components/six-header/six-header";
import { ItemPickerPaddingDirection, ItemPickerType } from "./components/six-item-picker/types";
import { SixItemPickerChangePayload } from "./components/six-item-picker/six-item-picker";
import { SixLanguageSwitcherChangePayload, SixLanguageSwitcherInput } from "./components/six-language-switcher/six-language-switcher";
import { SixMenuItemData as SixMenuItemData1, SixMenuItemSelectedPayload } from "./components/six-menu/six-menu";
import { StageType } from "./components/six-stage-indicator/six-stage-indicator";
import { SixSearchFieldChangePayload } from "./components/six-search-field/six-search-field";
import { SixSelectChangePayload } from "./components/six-select/six-select";
import { StageType as StageType1 } from "./components/six-stage-indicator/six-stage-indicator";
import { SixTabHidePayload, SixTabShowPayload } from "./components/six-tab-group/six-tab-group";
import { TimeFormat } from "./utils/time.util";
import { SixTimepickerChange } from "./components/six-timepicker/six-timepicker";
export { AlertType } from "./components/six-alert/six-alert";
export { EmptyPayload } from "./utils/types";
export { SixDateFormats } from "./components/six-datepicker/six-date-formats";
export { SixDatepickerSelectPayload } from "./components/six-datepicker/six-datepicker";
export { SixMenuItemData } from "./components/six-menu/six-menu";
export { SixDropdownAsyncFilterPayload, SixDropdownAutoFilterPayload, SixDropdownScrollPayload } from "./components/six-dropdown/six-dropdown";
export { SixFileListDownloadPayload, SixFileListRemovePayload } from "./components/six-file-list-item/six-file-list-item";
export { SixFileUploadFailurePayload, SixFileUploadSuccessPayload } from "./components/six-file-upload/six-file-upload";
export { SixHeaderAppSwitcherSelectPayload, SixHeaderProfileSelectPayload, SixHeaderSearchFieldToggle } from "./components/six-header/six-header";
export { ItemPickerPaddingDirection, ItemPickerType } from "./components/six-item-picker/types";
export { SixItemPickerChangePayload } from "./components/six-item-picker/six-item-picker";
export { SixLanguageSwitcherChangePayload, SixLanguageSwitcherInput } from "./components/six-language-switcher/six-language-switcher";
export { SixMenuItemData as SixMenuItemData1, SixMenuItemSelectedPayload } from "./components/six-menu/six-menu";
export { StageType } from "./components/six-stage-indicator/six-stage-indicator";
export { SixSearchFieldChangePayload } from "./components/six-search-field/six-search-field";
export { SixSelectChangePayload } from "./components/six-select/six-select";
export { StageType as StageType1 } from "./components/six-stage-indicator/six-stage-indicator";
export { SixTabHidePayload, SixTabShowPayload } from "./components/six-tab-group/six-tab-group";
export { TimeFormat } from "./utils/time.util";
export { SixTimepickerChange } from "./components/six-timepicker/six-timepicker";
export namespace Components {
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixAlert {
        /**
          * Set to true to make the alert closable.
         */
        "closable": boolean;
        /**
          * The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with the alert before it closes (e.g. moves the mouse over it), the timer will restart.
         */
        "duration": number;
        /**
          * Hides the alert
         */
        "hide": () => Promise<void>;
        /**
          * Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * Shows the alert.
         */
        "show": () => Promise<void>;
        /**
          * Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when dismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by calling this method again. The returned promise will resolve after the alert is hidden.
          * @param adjustPosition If true, the top and right position of the toast stack is shifted according to the six-root header's height and the presence of a vertical scrollbar.
         */
        "toast": (adjustPosition?: boolean) => Promise<void>;
        /**
          * The type of alert.
         */
        "type": AlertType;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixAvatar {
        /**
          * Alternative text for the image.
         */
        "alt": string;
        /**
          * The image source to use for the avatar.
         */
        "image": string;
        /**
          * Initials to use as a fallback when no image is available (1-2 characters max recommended).
         */
        "initials": string;
        /**
          * The shape of the avatar.
         */
        "shape": 'circle' | 'square' | 'rounded';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixBadge {
        /**
          * Set to true to draw a pill-style badge with rounded edges.
         */
        "pill": boolean;
        /**
          * Set to true to make the badge pulsate to draw attention.
         */
        "pulse": boolean;
        /**
          * The badge's type.
         */
        "type": 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info' | 'action';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixButton {
        /**
          * Set to true to draw the button with a caret for use with dropdowns, popovers, etc.
         */
        "caret": boolean;
        /**
          * Set to true to draw a circle button.
         */
        "circle": boolean;
        /**
          * Set to true to disable the button.
         */
        "disabled": boolean;
        /**
          * Tells the browser to download the linked file as this filename. Only used when `href` is set.
         */
        "download"?: string;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.
         */
        "href"?: string;
        /**
          * Set to true to draw the button in a loading state.
         */
        "loading": boolean;
        /**
          * An optional name for the button. Ignored when `href` is set.
         */
        "name": string;
        /**
          * Set to true to draw a pill-style button with rounded edges.
         */
        "pill": boolean;
        /**
          * Removes focus from the button.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Indicates if activating the button should reset the form.
         */
        "reset": boolean;
        /**
          * Sets focus on the button.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The button's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Indicates if activating the button should submit the form. Ignored when `href` is set.
         */
        "submit": boolean;
        /**
          * Tells the browser where to open the link. Only used when `href` is set.
         */
        "target"?: '_blank' | '_parent' | '_self' | '_top';
        /**
          * The button's type.
         */
        "type": 'secondary' | 'primary' | 'link' | 'success' | 'warning' | 'danger' | 'action';
        /**
          * An optional value for the button. Ignored when `href` is set.
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixCard {
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixCheckbox {
        /**
          * Set to true to draw the checkbox in a checked state.
         */
        "checked": boolean;
        /**
          * Set to true to disable the checkbox.
         */
        "disabled": boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText": string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * Set to true to draw the checkbox in an indeterminate state.
         */
        "indeterminate": boolean;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid": boolean;
        /**
          * The label text.
         */
        "label": string;
        /**
          * The checkbox's name attribute.
         */
        "name": string;
        /**
          * Removes focus from the checkbox.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required": boolean;
        /**
          * Sets focus on the checkbox.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixDatepicker {
        /**
          * Callback to determine which date in the datepicker should be selectable. the callback function will get a datestring as an argument, e.g. '2021-07-04'  Usage e.g.: const datepicker = document.getElementById('allowed-date-picker'); datepicker.allowedDates = datestring => parseInt(datestring.split('-')[2], 10) % 2 === 0;
         */
        "allowedDates": (date: Date) => boolean;
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable": boolean;
        /**
          * Closes the datepicker dropdown after selection
         */
        "closeOnSelect": boolean;
        /**
          * The dropdown will close when the user interacts outside of this element (e.g. clicking).
         */
        "containingElement"?: HTMLElement;
        /**
          * Define the dateFormat. Valid formats are: 'dd.mm.yyyy' 'yyyy-mm-dd' 'dd-mm-yyyy' 'dd/mm/yyyy' 'yyyy/mm/dd' 'dd.mm.yy' 'yy-mm-dd' 'dd-mm-yy' 'dd/mm/yy' 'yy/mm/dd'
         */
        "dateFormat": SixDateFormats;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `dateChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * The date to defines where the datepicker popup starts. The prop accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "defaultDate"?: string;
        /**
          * If `true` the component is disabled.
         */
        "disabled": boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText": string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist": boolean;
        /**
          * Set the position of the icon
         */
        "iconPosition": 'left' | 'right';
        /**
          * Indicates whether or not the calendar should be shown as an inline (always open) component
         */
        "inline": boolean;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid": boolean;
        /**
          * The label text.
         */
        "label": string;
        /**
          * The language used to render the weekdays and months.
         */
        "locale": 'en' | 'de' | 'fr' | 'it';
        /**
          * The maximum datetime allowed. Value must be a date object
         */
        "max"?: Date;
        /**
          * The minimum datetime allowed. Value must be a date object
         */
        "min"?: Date;
        /**
          * The input's name attribute.
         */
        "name": string;
        /**
          * Indicates whether or not the calendar dropdown is open on startup. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * The placeholder defines what text to be shown on the input element
         */
        "placeholder"?: string;
        /**
          * The enforced placement of the dropdown panel.
         */
        "placement"?: 'top' | 'bottom';
        /**
          * If `true` the user can only select a date via the component in the popup, but not directly edit the input field.
         */
        "readonly": boolean;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required": boolean;
        /**
          * Selects an option
         */
        "select": (datestring?: string) => Promise<void>;
        /**
          * Sets focus on the datepickers input.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Datepicker size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Set the type.
         */
        "type": 'date' | 'date-time';
        /**
          * The value of the form field, which accepts a date object.
         */
        "value"?: Date;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixDetails {
        /**
          * Set to true to prevent the user from toggling the details.
         */
        "disabled": boolean;
        /**
          * Set to false when you want to hide the summary icon and disable the open/close mechanism. Usually not needed, but used internally by 'six-sidebar-item-group'
         */
        "hasContent": boolean;
        /**
          * Hides the detail body
         */
        "hide": () => Promise<void>;
        /**
          * Set to true when you want to use six-details inline e.g. in a sidebar
         */
        "inline": boolean;
        /**
          * Indicates whether the details is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * Set to true when you want details without content to be selectable. This is important if you e.g. have a toggled sidebar where some menus have no children
         */
        "selectableEmpty": boolean;
        /**
          * Shows the detail body
         */
        "show": () => Promise<void>;
        /**
          * The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.
         */
        "summary": string;
        /**
          * The summary icon to show in the details header. If you need to display HTML, use the `summary-icon` slot instead.
         */
        "summaryIcon"?: string;
        /**
          * The icon's size.
         */
        "summaryIconSize": | 'inherit'
    | 'xSmall'
    | 'small'
    | 'medium'
    | 'large'
    | 'xLarge'
    | 'xxLarge'
    | 'xxxLarge';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixDialog {
        /**
          * Hides the dialog
         */
        "hide": () => Promise<void>;
        /**
          * The dialog's label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility.
         */
        "label": string;
        /**
          * Set to true to disable the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the dialog.
         */
        "noHeader": boolean;
        /**
          * Indicates whether the dialog is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * Shows the dialog
         */
        "show": () => Promise<void>;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixDrawer {
        /**
          * By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of its parent element, set this prop and add `position: relative` to the parent.
         */
        "contained": boolean;
        /**
          * Hides the drawer
         */
        "hide": () => Promise<void>;
        /**
          * The drawer's label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility.
         */
        "label": string;
        /**
          * Removes the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the drawer.
         */
        "noHeader": boolean;
        /**
          * Indicates whether the drawer is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * The direction from which the drawer will open.
         */
        "placement": 'top' | 'right' | 'bottom' | 'left';
        /**
          * Shows the drawer
         */
        "show": () => Promise<void>;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixDropdown {
        /**
          * Set to true to allow async filtering. When you enter something in the search field the component will only emit an event but not filter any elements itself. You can then simply listen to the 'six-async-filter-fired' event to manage the shown menu-items yourself
         */
        "asyncFilter": boolean;
        /**
          * By default the search field will be focused when opening a dropdown with filtering enabled.
         */
        "autofocusFilter": boolean;
        /**
          * Determines whether the dropdown should hide when a menu item is selected.
         */
        "closeOnSelect": boolean;
        /**
          * The dropdown will close when the user interacts outside of this element (e.g. clicking).
         */
        "containingElement"?: HTMLElement;
        /**
          * The panel can be opend/closed by pressing the spacebar or the enter key. In some cases you might want to avoid this
         */
        "disableHideOnEnterAndSpace": boolean;
        /**
          * The distance in pixels from which to offset the panel away from its trigger.
         */
        "distance": number;
        /**
          * Set to true to allow auto filtering for entries in the dropdown. With this flag the dropdown will automatically filter itsel. If you need to coordinate the shown elements yourself, e.g. because you need to call an endpoint use asyncFilter instead
         */
        "filter": boolean;
        /**
          * The debounce for the filter callbacks.
         */
        "filterDebounce": number;
        /**
          * The filter's placeholder text.
         */
        "filterPlaceholder": string;
        /**
          * Hides the dropdown panel
         */
        "hide": () => Promise<void>;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist": boolean;
        /**
          * Determines if the dropdown panel's width should match the width of the trigger element.  If set to `true`, the panel will resize its width to align with the trigger's width. If `false` or omitted, the panel will maintain its default width.
         */
        "matchTriggerWidth": boolean;
        /**
          * Indicates whether the dropdown is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * Set the options to be shown in the dropdown (alternative to setting the elements via html)
         */
        "options": SixMenuItemData[];
        /**
          * The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel inside the viewport.
         */
        "placement": | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * Instructs the dropdown menu to reposition. Useful when the position or size of the trigger changes when the menu is activated.
          * @deprecated : use the property `matchTriggerWidth` instead.
         */
        "reposition": () => Promise<void>;
        /**
          * Shows the dropdown panel
         */
        "show": () => Promise<void>;
        /**
          * The distance in pixels from which to offset the panel along its trigger.
         */
        "skidding": number;
        /**
          * Defines whether the menu list will be rendered virtually i.e. only the elements actually shown (and a couple around) are actually rendered in the DOM. If you use virtual scrolling pass the elements via prop instead of via slot.
         */
        "virtualScroll": boolean;
    }
    /**
     * @since 4.0
     * @status beta
     */
    interface SixError {
    }
    interface SixErrorPage {
        /**
          * Defines a custom description.
         */
        "customDescription"?: string[];
        /**
          * Defines a custom icon.
         */
        "customIcon"?: string;
        /**
          * Defines a custom title.
         */
        "customTitle"?: string;
        /**
          * Defines error Code and thus displays the proper error page.
         */
        "errorCode"?: 404 | 403 | 500;
        /**
          * Defines language and thus displays the proper error page in the selected language.
         */
        "language": 'en' | 'de';
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixFileList {
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixFileListItem {
        /**
          * The date when the file was uploaded
         */
        "date": string;
        /**
          * An id to clearly identify the file
         */
        "identifier": string;
        /**
          * The filename
         */
        "name": string;
        /**
          * Set to true if you don't want to allow to delete this file
         */
        "nodelete": boolean;
        /**
          * Set to true if you don't want to allow to download this file
         */
        "nodownload": boolean;
        /**
          * The file size. This number will be divided by 1024 to show the filesize in KB
         */
        "size"?: number;
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixFileUpload {
        /**
          * Accepted MIME-Types.
         */
        "accept"?: string;
        /**
          * Set to true if file control should be small.
         */
        "compact": boolean;
        /**
          * Set when button is disabled.
         */
        "disabled": false;
        /**
          * Label of the drop area.
         */
        "label"?: string;
        /**
          * Allowed max file size in bytes.
         */
        "maxFileSize"?: number;
        /**
          * More than one file allowed.
         */
        "multiple": false;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixFooter {
    }
    /**
     * @since 1.1
     * @status stable
     */
    interface SixGroupLabel {
        /**
          * Set to true to disable the label.
         */
        "disabled": boolean;
        /**
          * The wrapper label's help text. Alternatively, you can use the help-text slot.
         */
        "helpText": string;
        /**
          * The wrapper label's label. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required": boolean;
        /**
          * The label's size.
         */
        "size": 'small' | 'medium' | 'large';
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixHeader {
        /**
          * Set whether the logo should be clickable
         */
        "clickableLogo": boolean;
        /**
          * Get open state for search
         */
        "getIsSearchOpen": () => Promise<boolean>;
        /**
          * Set whether the hamburger menu should be visible or not
         */
        "hideHamburgerMenu": boolean;
        /**
          * Set the hamburger menu icon to open or closed state
         */
        "openHamburgerMenu": boolean;
        /**
          * Set the header search to be in an open or closed state
         */
        "openSearch": boolean;
        /**
          * Sets open state for search
         */
        "setSearchOpenState": (openState: boolean) => Promise<void>;
        /**
          * Indicates if content should be shifted down when search field is visible.
         */
        "shiftContent": boolean;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixIcon {
        /**
          * If set to true the default material outlined icons are not used.
         */
        "filled": boolean;
        /**
          * The icon's size.
         */
        "size": | 'inherit'
    | 'xSmall'
    | 'small'
    | 'medium'
    | 'large'
    | 'xLarge'
    | 'xxLarge'
    | 'xxxLarge';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixIconButton {
        /**
          * Set to true to disable the button.
         */
        "disabled": boolean;
        /**
          * HTML symbol code or entity.
         */
        "html"?: string;
        /**
          * A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should always include a label that describes what the icon button does.
         */
        "label"?: string;
        /**
          * The name of the icon to draw.
         */
        "name"?: string;
        /**
          * The icon's size.
         */
        "size": 'xSmall' | 'small' | 'medium' | 'large' | 'xLarge' | 'xxLarge' | 'xxxLarge';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixInput {
        /**
          * The input's autocaptialize attribute.
         */
        "autocapitalize": string;
        /**
          * The input's autocomplete attribute.
         */
        "autocomplete": string;
        /**
          * The input's autocorrect attribute.
         */
        "autocorrect": 'on' | 'off';
        /**
          * The input's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable": boolean;
        /**
          * Set to true to disable the input.
         */
        "disabled": boolean;
        /**
          * Internal: Styles the input for the dropdown filter search.
         */
        "dropdownSearch": boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText": string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * The input's help text. Alternatively, you can use the help-text slot.
         */
        "helpText": string;
        /**
          * The input's inputmode attribute.
         */
        "inputmode"?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid": boolean;
        /**
          * The label text.
         */
        "label": string;
        /**
          * Set to render as line
         */
        "line": boolean;
        /**
          * The input's maximum value.
         */
        "max"?: number;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength"?: number;
        /**
          * The input's minimum value.
         */
        "min"?: number;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength"?: number;
        /**
          * The input's name attribute.
         */
        "name": string;
        /**
          * A pattern to validate input against.
         */
        "pattern"?: string;
        /**
          * Set to true to draw a pill-style input with rounded edges.
         */
        "pill": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Set to true to make the input readonly.
         */
        "readonly": boolean;
        /**
          * Removes focus from the input.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required": boolean;
        /**
          * Selects all the text in the input.
         */
        "select": () => Promise<void | undefined>;
        /**
          * Sets focus on the input.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Replaces a range of text with a new string.
         */
        "setRangeText": (replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve') => Promise<void>;
        /**
          * Sets the start and end positions of the text selection (0-based).
         */
        "setSelectionRange": (selectionStart: number, selectionEnd: number, selectionDirection?: 'forward' | 'backward' | 'none') => Promise<void | undefined>;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Enables spell checking on the input.
         */
        "spellcheck": boolean;
        /**
          * The input's step attribute.
         */
        "step"?: number;
        /**
          * Set to true to add a password toggle button for password inputs.
         */
        "togglePassword": boolean;
        /**
          * The input's type.
         */
        "type": 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url';
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixItemPicker {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `six-item-picker-change-debounced` event. If you want your change debounce event to not trigger when keeping the nav button pressed before, make sure debounce is a bit bigger than timeout, otherwise keeping the button pressed will trigger the event twice: once you click (and keep pressed) and once you release
         */
        "debounce": number;
        /**
          * Set the amount of time, in milliseconds, to wait between switching to next item when mouse button is held pressed.
         */
        "interval": number;
        /**
          * Defines a custom list of items you can iterate through
         */
        "items"?: string[];
        /**
          * The maximum value allowed to pick.
         */
        "max"?: number | string;
        /**
          * The minimum value allowed to pick.
         */
        "min"?: number | string;
        /**
          * Defines whether the items should be padded
         */
        "padded": boolean;
        /**
          * Defines the character used for padding
         */
        "paddingChar": string;
        /**
          * Defines whether the padding should be before or after the value. You can either use 'before' or 'after'. By default, before is selected
         */
        "paddingDirection": ItemPickerPaddingDirection;
        /**
          * Defines the length of the padded area
         */
        "paddingLength": number;
        /**
          * Define whether the picker should to a roundtrip i.e. start at max when reaching min and vice versa.
         */
        "roundtrip": boolean;
        /**
          * Defines how many steps should be taken when navigating
         */
        "step": number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger faster switching between items.
         */
        "timeout": number;
        /**
          * The type of items you want to rotate through.
         */
        "type": ItemPickerType;
        /**
          * The item picker's value attribute.
         */
        "value": number | string;
    }
    interface SixLanguageSwitcher {
        /**
          * The languages which should be selectable options.
         */
        "languages": string[] | SixLanguageSwitcherInput[];
        /**
          * The language which should be shown as selected
         */
        "selected"?: string;
    }
    /**
     * @since 1.01
     * @status stable
     */
    interface SixLayoutGrid {
        /**
          * Set the number of grid columns
         */
        "columns"?: number;
    }
    /**
     * @since 1.01
     * @status stable
     */
    interface SixMainContainer {
        /**
          * Set to false to remove top and bottom padding.
         */
        "padded": boolean;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixMenu {
        /**
          * Internal: Disables handling of key presses.
         */
        "disableKeyboardHandling": boolean;
        /**
          * Used for virtual scrolling Define how many items should be rendered in the DOM when using virtual scrolling
         */
        "itemSize": number;
        /**
          * Set the options to be shown in the dropdown
         */
        "items": SixMenuItemData1[] | null;
        /**
          * Defines how many items should be shown. If the number of items is larger than this property a scrollbar will be shown
         */
        "itemsShown"?: number;
        /**
          * Set to true to remove the box-shadow
         */
        "removeBoxShadow": boolean;
        /**
          * Used for virtual scrolling Define the debounce for listening on scrolling changes in milliseconds. The lower the number the more sensitive the component reacts to scrolling changes.
         */
        "scrollingDebounce": number;
        /**
          * Initiates type-to-select logic, which automatically selects an option based on what the user is currently typing. The key passed will be appended to the internal query and the selection will be updated. After a brief period, the internal query is cleared automatically. This method is intended to be used with the keydown event. Useful for enabling type-to-select when the menu doesn't have focus.
         */
        "typeToSelect": (key: string) => Promise<void>;
        /**
          * Defines whether the menu list will be rendered virtually i.e. only the elements actually shown (and a couple around) are actually rendered in the DOM. If you use virtual scrolling pass the elements via prop instead of via slot.
         */
        "virtualScroll": boolean;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixMenuDivider {
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixMenuItem {
        /**
          * Defines if the checked state is displayed as a checkbox or a check-icon
         */
        "checkType": 'checkbox' | 'check';
        /**
          * Internal: Draws the item in a checked state. CheckType needs to be set to 'checkbox' or 'check' to show the checked state
         */
        "checked": boolean;
        /**
          * Set to true to draw the menu item in a disabled state.
         */
        "disabled": boolean;
        /**
          * Returns a text label based on the contents of the menu item's default slot.
         */
        "getTextLabel": () => Promise<string>;
        /**
          * Removes focus from the button.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus on the button.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * A unique value to store in the menu item. This can be used as a way to identify menu items when selected.
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixMenuLabel {
    }
    /**
     * @since 1.1
     * @status stable
     */
    interface SixPicto {
        /**
          * Defines the size of the icon.
         */
        "size": 'xSmall' | 'small' | 'medium' | 'large' | 'xLarge' | 'xxLarge' | 'xxxLarge' | '4xl';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixProgressBar {
        /**
          * When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.
         */
        "indeterminate": boolean;
        /**
          * The progress bar's percentage, 0 to 100.
         */
        "percentage": number;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixProgressRing {
        /**
          * The current progress percentage, 0 - 100.
         */
        "percentage": number;
        /**
          * The size of the progress ring in pixels.
         */
        "size": number;
        /**
          * The stroke width of the progress ring in pixels.
         */
        "strokeWidth": number;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixRadio {
        /**
          * Set to true to draw the radio in a checked state.
         */
        "checked": boolean;
        /**
          * Set to true to disable the radio.
         */
        "disabled": boolean;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid": boolean;
        /**
          * The radio's name attribute.
         */
        "name": string;
        /**
          * Removes focus from the radio.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus on the radio.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The radio's value attribute.
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixRange {
        /**
          * Set to true to disable the input.
         */
        "disabled": boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText": string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * The range's help text. Alternatively, you can use the help-text slot.
         */
        "helpText": string;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid": boolean;
        /**
          * The label text.
         */
        "label": string;
        /**
          * The input's max attribute.
         */
        "max": number;
        /**
          * The input's min attribute.
         */
        "min": number;
        /**
          * The input's name attribute.
         */
        "name": string;
        /**
          * Removes focus from the input.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required": boolean;
        /**
          * Sets focus on the input.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The input's step attribute.
         */
        "step": number;
        /**
          * The preferred placedment of the tooltip.
         */
        "tooltip": 'top' | 'bottom' | 'none';
        /**
          * A function used to format the tooltip's value.
         */
        "tooltipFormatter": (value: number) => string;
        /**
          * The input's value attribute.
         */
        "value": number;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixRoot {
        /**
          * Defines whether the content section should be padded
         */
        "padded": boolean;
        /**
          * Defines the stage of the application
         */
        "stage": StageType;
        /**
          * Defines the version of the application
         */
        "version": string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixSearchField {
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable": boolean;
        /**
          * Debounce time in milliseconds, default is 300 ms
         */
        "debounce": number;
        /**
          * Set to true to disable the input.
         */
        "disabled": boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * The input's value attribute.
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixSelect {
        /**
          * Set to true to allow async filtering. When you enter something in the search field the component will only emit an event but not filter any elements itself. You can then simply listen to the 'six-async-filter-fired' event to manage the shown menu-items yourself
         */
        "asyncFilter": boolean;
        /**
          * Set to true to turn the six-select into an autocomplete.
         */
        "autocomplete": boolean;
        /**
          * Set to true to add a clear button when the select is populated.
         */
        "clearable": boolean;
        /**
          * Set to true to disable the select control.
         */
        "disabled": boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText": string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * Set to true to allow filtering for entries in the dropdown
         */
        "filter": boolean;
        /**
          * The debounce for the filter callbacks.
         */
        "filterDebounce"?: number;
        /**
          * The filter's placeholder text.
         */
        "filterPlaceholder"?: string;
        /**
          * The select's help text. Alternatively, you can use the help-text slot.
         */
        "helpText": string;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist": boolean;
        /**
          * The debounce for when the input changes for autocompletes should be emitted
         */
        "inputDebounce": number;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid": boolean;
        /**
          * The label text.
         */
        "label": string;
        /**
          * Set to render as line
         */
        "line": boolean;
        /**
          * The maximum number of tags to show when `multiple` is true. After the maximum, "+n" will be shown to indicate the number of additional items that are selected. Set to -1 to remove the limit.
          * @deprecated : This property is ignored. The component now displays as many items as possible and computes the "+n" dynamically.
         */
        "maxTagsVisible": number;
        /**
          * Set to true to enable multiselect.
         */
        "multiple": boolean;
        /**
          * The select's name.
         */
        "name": string;
        /**
          * Set the options to be shown in the dropdown (alternative to setting the elements via html)
         */
        "options": SixMenuItemData[] | null;
        /**
          * Set to true to draw a pill-style select with rounded edges.
         */
        "pill": boolean;
        /**
          * The select's placeholder text.
         */
        "placeholder": string;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required": boolean;
        /**
          * Enables the select all button.
         */
        "selectAllButton": boolean;
        /**
          * Custom text for the "select all" button. Defaults to "Select all" and equivalents in supported languages.
         */
        "selectAllText"?: string;
        /**
          * Sets focus on the select.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The select's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The value of the control. This will be a string or an array depending on `multiple`.
         */
        "value": string | string[];
        /**
          * Defines whether the menu list will be rendered virtually i.e. only the elements actually shown (and a couple around) are actually rendered in the DOM. If you use virtual scrolling pass the elements via prop instead of via slot.
         */
        "virtualScroll": boolean;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixSidebar {
        /**
          * Hides the sidebar
         */
        "hide": () => Promise<void>;
        /**
          * Indicates whether the sidebar is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * Sidebar position
         */
        "position": 'left' | 'right';
        /**
          * Allows to select a menu item programmatically by index
         */
        "selectItemByIndex": (index: number) => Promise<void>;
        /**
          * Allows to select a menu item programmatically by name
         */
        "selectItemByName": (value: string) => Promise<void>;
        /**
          * Shows the sidebar
         */
        "show": () => Promise<void>;
        /**
          * Toggles whether the sidebar should be shown or hidden
         */
        "toggle": () => Promise<void>;
        /**
          * Define whether sidebar is toggled meaning only one menu can be open at the same time
         */
        "toggled": boolean;
        /**
          * Sidebar width
         */
        "width": string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixSidebarItem {
        /**
          * Set to true to draw the sidebar item in a disabled state.
         */
        "disabled": boolean;
        /**
          * Provide if the item should be rendered as anchor tag. Note, that the href is added automatically when using routerLink in Angular.
         */
        "href": string | undefined;
        /**
          * Set to true to draw the item in a selected state.
         */
        "selected": boolean;
        /**
          * A unique value to store in the sidebar item. This can be used as a way to identify sidebar items when selected.
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixSidebarItemGroup {
        /**
          * Provide if the item should be rendered as anchor tag. Note, that the href is added automatically when using routerLink in Angular.
         */
        "href": string | undefined;
        /**
          * Icon of the group
         */
        "icon": string;
        /**
          * Title of item group
         */
        "name": string;
        /**
          * Indicates whether the sidebar is shown
         */
        "open": boolean;
        /**
          * Custom summary icon name.
         */
        "summaryIcon"?: string;
        /**
          * A unique value to store in the sidebar item of the group label. This can be used as a way to identify sidebar items when selected.
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixSpinner {
        /**
          * Indicates if the spinner is shown as animated SIX logo or simple spinner.
         */
        "six": boolean;
    }
    interface SixStageIndicator {
        /**
          * The indicators value attribute
         */
        "stage": StageType1;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixSwitch {
        /**
          * Set to true to draw the switch in a checked state.
         */
        "checked": boolean;
        /**
          * Set to true to disable the switch.
         */
        "disabled": boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText": string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid": boolean;
        /**
          * The label text.
         */
        "label": string;
        /**
          * The switch's name attribute.
         */
        "name": string;
        /**
          * Removes focus from the switch.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required": boolean;
        /**
          * Sets focus on the switch.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The switch's value attribute.
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTab {
        /**
          * Set to true to draw the tab in an active state.
         */
        "active": boolean;
        /**
          * When true, the tab will be rendered with a close icon.
         */
        "closable": boolean;
        /**
          * Set to true to draw the tab in a disabled state.
         */
        "disabled": boolean;
        /**
          * The name of the tab panel the tab will control. The panel must be located in the same tab group.
         */
        "panel": string;
        /**
          * Removes focus from the tab.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus to the tab.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTabGroup {
        /**
          * Disables the scroll arrows that appear when tabs overflow.
         */
        "noScrollControls": boolean;
        /**
          * The placement of the tabs.
         */
        "placement": 'top' | 'bottom' | 'left' | 'right';
        /**
          * Shows the specified tab panel.
         */
        "show": (panel: string) => Promise<void>;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTabPanel {
        /**
          * When true, the tab panel will be shown.
         */
        "active": boolean;
        /**
          * The tab panel's name.
         */
        "name": string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTag {
        /**
          * Set to true to make the tag clearable.
         */
        "clearable": boolean;
        /**
          * Set to true to draw a pill-style tag with rounded edges.
         */
        "pill": boolean;
        /**
          * The tag's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The tag's type.
         */
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'action' | 'text';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTextarea {
        /**
          * The textarea's autocaptialize attribute.
         */
        "autocapitalize": string;
        /**
          * The textarea's autocomplete attribute.
         */
        "autocomplete": string;
        /**
          * The textarea's autocorrect attribute.
         */
        "autocorrect": 'on' | 'off';
        /**
          * The textarea's autofocus attribute.
         */
        "autofocus": boolean;
        /**
          * Set to true to disable the textarea.
         */
        "disabled": boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText": string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * The textarea's help text. Alternatively, you can use the help-text slot.
         */
        "helpText": string;
        /**
          * The textarea's inputmode attribute.
         */
        "inputmode"?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid": boolean;
        /**
          * The label text.
         */
        "label": string;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength"?: number;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength"?: number;
        /**
          * The textarea's name attribute.
         */
        "name": string;
        /**
          * The textarea's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Set to true for a readonly textarea.
         */
        "readonly": boolean;
        /**
          * Removes focus fromt the textarea.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required": boolean;
        /**
          * Controls how the textarea can be resized.
         */
        "resize": 'none' | 'vertical' | 'auto';
        /**
          * The number of rows to display by default.
         */
        "rows": number;
        /**
          * Selects all the text in the input.
         */
        "select": () => Promise<void | undefined>;
        /**
          * Sets focus on the textarea.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Replaces a range of text with a new string.
         */
        "setRangeText": (replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve') => Promise<void>;
        /**
          * Sets the start and end positions of the text selection (0-based).
         */
        "setSelectionRange": (selectionStart: number, selectionEnd: number, selectionDirection?: 'forward' | 'backward' | 'none') => Promise<void | undefined>;
        /**
          * The textarea's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The textarea's spellcheck attribute.
         */
        "spellcheck": boolean;
        /**
          * The textarea's value attribute.
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixTile {
        /**
          * Flag, whether the tile is closeable.
         */
        "closeable": boolean;
        /**
          * Enables tile tooltip for tiles
         */
        "disableTooltip": boolean;
        /**
          * Set to true to disable the tile.
         */
        "disabled": boolean;
        /**
          * Flag, whether the tile should cast a shadow.
         */
        "elevated": boolean;
        /**
          * Hides the tile
         */
        "hide": () => Promise<void>;
        /**
          * The icon's name.
         */
        "iconName"?: string;
        /**
          * The tile's label.
         */
        "label": string;
        /**
          * Shows the tile
         */
        "show": () => Promise<void>;
        /**
          * The tile's size.
         */
        "size": 'small' | 'medium' | 'large';
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixTimepicker {
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable": boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `six-timepicker-change-debounced` event. If you want your change debounce event to not trigger when keeping the nav button pressed before, make sure debounce is a bit bigger than timeout, otherwise keeping the button pressed will trigger the event twice: once you click (and keep pressed) and once you release
         */
        "debounce": number;
        /**
          * The defaultTime defines the default setting for the timepicker when you open the popup. Default time must match the provided format.
         */
        "defaultTime"?: string;
        /**
          * If `true` the component is disabled.
         */
        "disabled": boolean;
        /**
          * The input's error text. Alternatively, you can use the error-text slot.
         */
        "errorText": string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * Define the time format. Valid formats are:  HH:mm:ss hh:mm:ss:aa HH:mm:ss:ms hh:mm:ss:ms:aa HH:mm hh:mm:aa HH hh:aa mm ss ms  where HH is the 24 hour format and hh is the 12 hour format  Please notice that when using the 12-hour-clock (hh) you always need a period indicator (aa). So the time can be parsed as either am or pm
         */
        "format": TimeFormat;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist": boolean;
        /**
          * Set the position of the icon
         */
        "iconPosition": 'left' | 'right';
        /**
          * Indicates whether the timepicker should be shown as an inline (always open) component
         */
        "inline": boolean;
        /**
          * Set the amount of time, in milliseconds, to wait between switching to next timeunit (e.g. next hour) when mouse button is held pressed.
         */
        "interval": number;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid": boolean;
        /**
          * The input's label. Alternatively, you can use the label slot.
         */
        "label": string;
        /**
          * The input's name attribute.
         */
        "name": string;
        /**
          * Indicates whether the timepicker dropdown is open on startup. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * The placeholder defines what text to be shown on the input element
         */
        "placeholder"?: string;
        /**
          * The enforced placement of the dropdown panel.
         */
        "placement"?: 'top' | 'bottom';
        /**
          * If `true` the user can only select a time via the timepicker but not directly edit the input field.
         */
        "readonly": boolean;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required": boolean;
        /**
          * Define the separator to be shown between the time unit pickers. Please be aware that this property will modify the displayed separator only. The separator for a timestring is always expected to be a colon (eg. '13:52:20')
         */
        "separator": string;
        /**
          * Sets focus on the datepickers input.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Timepicker size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Set the amount of time, in milliseconds, to wait to trigger faster switching between timeunits (e.g. hours).
         */
        "timeout": number;
        /**
          * The value of the timepicker provided as a string. The string mast match the provided format (or default format)
         */
        "value": string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTooltip {
        /**
          * The tooltip's content. Alternatively, you can use the content slot.
         */
        "content": string;
        /**
          * Set to true to disable the tooltip, so it won't show when triggered.
         */
        "disabled": boolean;
        /**
          * The distance in pixels from which to offset the tooltip away from its target.
         */
        "distance": number;
        /**
          * Shows the tooltip.
         */
        "hide": () => Promise<void>;
        /**
          * Indicates whether the tooltip is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip inside the viewport.
         */
        "placement": | 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * Shows the tooltip.
         */
        "show": () => Promise<void>;
        /**
          * The distance in pixels from which to offset the tooltip along its target.
         */
        "skidding": number;
        /**
          * Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple options can be passed by separating them with a space. When manual is used, the tooltip must be activated programmatically.
         */
        "trigger": string;
    }
}
export interface SixAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixAlertElement;
}
export interface SixButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixButtonElement;
}
export interface SixCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixCheckboxElement;
}
export interface SixDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixDatepickerElement;
}
export interface SixDetailsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixDetailsElement;
}
export interface SixDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixDialogElement;
}
export interface SixDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixDrawerElement;
}
export interface SixDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixDropdownElement;
}
export interface SixFileListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixFileListItemElement;
}
export interface SixFileUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixFileUploadElement;
}
export interface SixHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixHeaderElement;
}
export interface SixInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixInputElement;
}
export interface SixItemPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixItemPickerElement;
}
export interface SixLanguageSwitcherCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixLanguageSwitcherElement;
}
export interface SixMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixMenuElement;
}
export interface SixRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixRadioElement;
}
export interface SixRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixRangeElement;
}
export interface SixSearchFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixSearchFieldElement;
}
export interface SixSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixSelectElement;
}
export interface SixSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixSidebarElement;
}
export interface SixSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixSwitchElement;
}
export interface SixTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixTabElement;
}
export interface SixTabGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixTabGroupElement;
}
export interface SixTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixTagElement;
}
export interface SixTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixTextareaElement;
}
export interface SixTileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixTileElement;
}
export interface SixTimepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixTimepickerElement;
}
export interface SixTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSixTooltipElement;
}
declare global {
    interface HTMLSixAlertElementEventMap {
        "six-alert-show": EmptyPayload;
        "six-alert-after-show": EmptyPayload;
        "six-alert-hide": EmptyPayload;
        "six-alert-after-hide": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixAlertElement extends Components.SixAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixAlertElementEventMap>(type: K, listener: (this: HTMLSixAlertElement, ev: SixAlertCustomEvent<HTMLSixAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixAlertElementEventMap>(type: K, listener: (this: HTMLSixAlertElement, ev: SixAlertCustomEvent<HTMLSixAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixAlertElement: {
        prototype: HTMLSixAlertElement;
        new (): HTMLSixAlertElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixAvatarElement extends Components.SixAvatar, HTMLStencilElement {
    }
    var HTMLSixAvatarElement: {
        prototype: HTMLSixAvatarElement;
        new (): HTMLSixAvatarElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixBadgeElement extends Components.SixBadge, HTMLStencilElement {
    }
    var HTMLSixBadgeElement: {
        prototype: HTMLSixBadgeElement;
        new (): HTMLSixBadgeElement;
    };
    interface HTMLSixButtonElementEventMap {
        "six-button-blur": EmptyPayload;
        "six-button-focus": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixButtonElement extends Components.SixButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixButtonElementEventMap>(type: K, listener: (this: HTMLSixButtonElement, ev: SixButtonCustomEvent<HTMLSixButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixButtonElementEventMap>(type: K, listener: (this: HTMLSixButtonElement, ev: SixButtonCustomEvent<HTMLSixButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixButtonElement: {
        prototype: HTMLSixButtonElement;
        new (): HTMLSixButtonElement;
    };
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixCardElement extends Components.SixCard, HTMLStencilElement {
    }
    var HTMLSixCardElement: {
        prototype: HTMLSixCardElement;
        new (): HTMLSixCardElement;
    };
    interface HTMLSixCheckboxElementEventMap {
        "six-checkbox-blur": EmptyPayload;
        "six-checkbox-change": EmptyPayload;
        "six-checkbox-focus": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixCheckboxElement extends Components.SixCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixCheckboxElementEventMap>(type: K, listener: (this: HTMLSixCheckboxElement, ev: SixCheckboxCustomEvent<HTMLSixCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixCheckboxElementEventMap>(type: K, listener: (this: HTMLSixCheckboxElement, ev: SixCheckboxCustomEvent<HTMLSixCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixCheckboxElement: {
        prototype: HTMLSixCheckboxElement;
        new (): HTMLSixCheckboxElement;
    };
    interface HTMLSixDatepickerElementEventMap {
        "six-datepicker-select": SixDatepickerSelectPayload;
        "six-datepicker-clear": EmptyPayload;
        "six-datepicker-blur": SixDatepickerSelectPayload;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixDatepickerElement extends Components.SixDatepicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixDatepickerElementEventMap>(type: K, listener: (this: HTMLSixDatepickerElement, ev: SixDatepickerCustomEvent<HTMLSixDatepickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixDatepickerElementEventMap>(type: K, listener: (this: HTMLSixDatepickerElement, ev: SixDatepickerCustomEvent<HTMLSixDatepickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixDatepickerElement: {
        prototype: HTMLSixDatepickerElement;
        new (): HTMLSixDatepickerElement;
    };
    interface HTMLSixDetailsElementEventMap {
        "six-details-show": EmptyPayload;
        "six-details-after-show": EmptyPayload;
        "six-details-hide": EmptyPayload;
        "six-details-after-hide": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixDetailsElement extends Components.SixDetails, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixDetailsElementEventMap>(type: K, listener: (this: HTMLSixDetailsElement, ev: SixDetailsCustomEvent<HTMLSixDetailsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixDetailsElementEventMap>(type: K, listener: (this: HTMLSixDetailsElement, ev: SixDetailsCustomEvent<HTMLSixDetailsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixDetailsElement: {
        prototype: HTMLSixDetailsElement;
        new (): HTMLSixDetailsElement;
    };
    interface HTMLSixDialogElementEventMap {
        "six-dialog-show": EmptyPayload;
        "six-dialog-after-show": EmptyPayload;
        "six-dialog-hide": EmptyPayload;
        "six-dialog-after-hide": EmptyPayload;
        "six-dialog-initial-focus": EmptyPayload;
        "six-dialog-overlay-dismiss": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixDialogElement extends Components.SixDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixDialogElementEventMap>(type: K, listener: (this: HTMLSixDialogElement, ev: SixDialogCustomEvent<HTMLSixDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixDialogElementEventMap>(type: K, listener: (this: HTMLSixDialogElement, ev: SixDialogCustomEvent<HTMLSixDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixDialogElement: {
        prototype: HTMLSixDialogElement;
        new (): HTMLSixDialogElement;
    };
    interface HTMLSixDrawerElementEventMap {
        "six-drawer-show": EmptyPayload;
        "six-drawer-after-show": EmptyPayload;
        "six-drawer-hide": EmptyPayload;
        "six-drawer-after-hide": EmptyPayload;
        "six-drawer-initial-focus": EmptyPayload;
        "six-drawer-overlay-dismiss": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixDrawerElement extends Components.SixDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixDrawerElementEventMap>(type: K, listener: (this: HTMLSixDrawerElement, ev: SixDrawerCustomEvent<HTMLSixDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixDrawerElementEventMap>(type: K, listener: (this: HTMLSixDrawerElement, ev: SixDrawerCustomEvent<HTMLSixDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixDrawerElement: {
        prototype: HTMLSixDrawerElement;
        new (): HTMLSixDrawerElement;
    };
    interface HTMLSixDropdownElementEventMap {
        "six-dropdown-show": EmptyPayload;
        "six-dropdown-after-show": EmptyPayload;
        "six-dropdown-hide": EmptyPayload;
        "six-dropdown-after-hide": EmptyPayload;
        "six-dropdown-auto-filter-fired": SixDropdownAutoFilterPayload;
        "six-async-filter-fired": SixDropdownAsyncFilterPayload;
        "six-dropdown-scroll": SixDropdownScrollPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixDropdownElement extends Components.SixDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixDropdownElementEventMap>(type: K, listener: (this: HTMLSixDropdownElement, ev: SixDropdownCustomEvent<HTMLSixDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixDropdownElementEventMap>(type: K, listener: (this: HTMLSixDropdownElement, ev: SixDropdownCustomEvent<HTMLSixDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixDropdownElement: {
        prototype: HTMLSixDropdownElement;
        new (): HTMLSixDropdownElement;
    };
    /**
     * @since 4.0
     * @status beta
     */
    interface HTMLSixErrorElement extends Components.SixError, HTMLStencilElement {
    }
    var HTMLSixErrorElement: {
        prototype: HTMLSixErrorElement;
        new (): HTMLSixErrorElement;
    };
    interface HTMLSixErrorPageElement extends Components.SixErrorPage, HTMLStencilElement {
    }
    var HTMLSixErrorPageElement: {
        prototype: HTMLSixErrorPageElement;
        new (): HTMLSixErrorPageElement;
    };
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface HTMLSixFileListElement extends Components.SixFileList, HTMLStencilElement {
    }
    var HTMLSixFileListElement: {
        prototype: HTMLSixFileListElement;
        new (): HTMLSixFileListElement;
    };
    interface HTMLSixFileListItemElementEventMap {
        "six-file-list-item-download": SixFileListDownloadPayload;
        "six-file-list-item-remove": SixFileListRemovePayload;
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface HTMLSixFileListItemElement extends Components.SixFileListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixFileListItemElementEventMap>(type: K, listener: (this: HTMLSixFileListItemElement, ev: SixFileListItemCustomEvent<HTMLSixFileListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixFileListItemElementEventMap>(type: K, listener: (this: HTMLSixFileListItemElement, ev: SixFileListItemCustomEvent<HTMLSixFileListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixFileListItemElement: {
        prototype: HTMLSixFileListItemElement;
        new (): HTMLSixFileListItemElement;
    };
    interface HTMLSixFileUploadElementEventMap {
        "six-file-upload-success": SixFileUploadSuccessPayload;
        "six-file-upload-failure": SixFileUploadFailurePayload;
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface HTMLSixFileUploadElement extends Components.SixFileUpload, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixFileUploadElementEventMap>(type: K, listener: (this: HTMLSixFileUploadElement, ev: SixFileUploadCustomEvent<HTMLSixFileUploadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixFileUploadElementEventMap>(type: K, listener: (this: HTMLSixFileUploadElement, ev: SixFileUploadCustomEvent<HTMLSixFileUploadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixFileUploadElement: {
        prototype: HTMLSixFileUploadElement;
        new (): HTMLSixFileUploadElement;
    };
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixFooterElement extends Components.SixFooter, HTMLStencilElement {
    }
    var HTMLSixFooterElement: {
        prototype: HTMLSixFooterElement;
        new (): HTMLSixFooterElement;
    };
    /**
     * @since 1.1
     * @status stable
     */
    interface HTMLSixGroupLabelElement extends Components.SixGroupLabel, HTMLStencilElement {
    }
    var HTMLSixGroupLabelElement: {
        prototype: HTMLSixGroupLabelElement;
        new (): HTMLSixGroupLabelElement;
    };
    interface HTMLSixHeaderElementEventMap {
        "six-header-app-name-clicked": EmptyPayload;
        "six-header-app-switcher-select": SixHeaderAppSwitcherSelectPayload;
        "six-header-profile-select": SixHeaderProfileSelectPayload;
        "six-header-hamburger-menu-clicked": EmptyPayload;
        "six-header-logo-clicked": EmptyPayload;
        "six-header-search-field-toggle": SixHeaderSearchFieldToggle;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixHeaderElement extends Components.SixHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixHeaderElementEventMap>(type: K, listener: (this: HTMLSixHeaderElement, ev: SixHeaderCustomEvent<HTMLSixHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixHeaderElementEventMap>(type: K, listener: (this: HTMLSixHeaderElement, ev: SixHeaderCustomEvent<HTMLSixHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixHeaderElement: {
        prototype: HTMLSixHeaderElement;
        new (): HTMLSixHeaderElement;
    };
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixIconElement extends Components.SixIcon, HTMLStencilElement {
    }
    var HTMLSixIconElement: {
        prototype: HTMLSixIconElement;
        new (): HTMLSixIconElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixIconButtonElement extends Components.SixIconButton, HTMLStencilElement {
    }
    var HTMLSixIconButtonElement: {
        prototype: HTMLSixIconButtonElement;
        new (): HTMLSixIconButtonElement;
    };
    interface HTMLSixInputElementEventMap {
        "six-input-change": EmptyPayload;
        "six-input-clear": EmptyPayload;
        "six-input-input": EmptyPayload;
        "six-input-focus": EmptyPayload;
        "six-input-blur": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixInputElement extends Components.SixInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixInputElementEventMap>(type: K, listener: (this: HTMLSixInputElement, ev: SixInputCustomEvent<HTMLSixInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixInputElementEventMap>(type: K, listener: (this: HTMLSixInputElement, ev: SixInputCustomEvent<HTMLSixInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixInputElement: {
        prototype: HTMLSixInputElement;
        new (): HTMLSixInputElement;
    };
    interface HTMLSixItemPickerElementEventMap {
        "six-item-picker-change": SixItemPickerChangePayload;
        "six-item-picker-change-debounced": SixItemPickerChangePayload;
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface HTMLSixItemPickerElement extends Components.SixItemPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixItemPickerElementEventMap>(type: K, listener: (this: HTMLSixItemPickerElement, ev: SixItemPickerCustomEvent<HTMLSixItemPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixItemPickerElementEventMap>(type: K, listener: (this: HTMLSixItemPickerElement, ev: SixItemPickerCustomEvent<HTMLSixItemPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixItemPickerElement: {
        prototype: HTMLSixItemPickerElement;
        new (): HTMLSixItemPickerElement;
    };
    interface HTMLSixLanguageSwitcherElementEventMap {
        "six-language-switcher-change": SixLanguageSwitcherChangePayload;
    }
    interface HTMLSixLanguageSwitcherElement extends Components.SixLanguageSwitcher, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixLanguageSwitcherElementEventMap>(type: K, listener: (this: HTMLSixLanguageSwitcherElement, ev: SixLanguageSwitcherCustomEvent<HTMLSixLanguageSwitcherElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixLanguageSwitcherElementEventMap>(type: K, listener: (this: HTMLSixLanguageSwitcherElement, ev: SixLanguageSwitcherCustomEvent<HTMLSixLanguageSwitcherElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixLanguageSwitcherElement: {
        prototype: HTMLSixLanguageSwitcherElement;
        new (): HTMLSixLanguageSwitcherElement;
    };
    /**
     * @since 1.01
     * @status stable
     */
    interface HTMLSixLayoutGridElement extends Components.SixLayoutGrid, HTMLStencilElement {
    }
    var HTMLSixLayoutGridElement: {
        prototype: HTMLSixLayoutGridElement;
        new (): HTMLSixLayoutGridElement;
    };
    /**
     * @since 1.01
     * @status stable
     */
    interface HTMLSixMainContainerElement extends Components.SixMainContainer, HTMLStencilElement {
    }
    var HTMLSixMainContainerElement: {
        prototype: HTMLSixMainContainerElement;
        new (): HTMLSixMainContainerElement;
    };
    interface HTMLSixMenuElementEventMap {
        "six-menu-item-selected": SixMenuItemSelectedPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixMenuElement extends Components.SixMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixMenuElementEventMap>(type: K, listener: (this: HTMLSixMenuElement, ev: SixMenuCustomEvent<HTMLSixMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixMenuElementEventMap>(type: K, listener: (this: HTMLSixMenuElement, ev: SixMenuCustomEvent<HTMLSixMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixMenuElement: {
        prototype: HTMLSixMenuElement;
        new (): HTMLSixMenuElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixMenuDividerElement extends Components.SixMenuDivider, HTMLStencilElement {
    }
    var HTMLSixMenuDividerElement: {
        prototype: HTMLSixMenuDividerElement;
        new (): HTMLSixMenuDividerElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixMenuItemElement extends Components.SixMenuItem, HTMLStencilElement {
    }
    var HTMLSixMenuItemElement: {
        prototype: HTMLSixMenuItemElement;
        new (): HTMLSixMenuItemElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixMenuLabelElement extends Components.SixMenuLabel, HTMLStencilElement {
    }
    var HTMLSixMenuLabelElement: {
        prototype: HTMLSixMenuLabelElement;
        new (): HTMLSixMenuLabelElement;
    };
    /**
     * @since 1.1
     * @status stable
     */
    interface HTMLSixPictoElement extends Components.SixPicto, HTMLStencilElement {
    }
    var HTMLSixPictoElement: {
        prototype: HTMLSixPictoElement;
        new (): HTMLSixPictoElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixProgressBarElement extends Components.SixProgressBar, HTMLStencilElement {
    }
    var HTMLSixProgressBarElement: {
        prototype: HTMLSixProgressBarElement;
        new (): HTMLSixProgressBarElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixProgressRingElement extends Components.SixProgressRing, HTMLStencilElement {
    }
    var HTMLSixProgressRingElement: {
        prototype: HTMLSixProgressRingElement;
        new (): HTMLSixProgressRingElement;
    };
    interface HTMLSixRadioElementEventMap {
        "six-radio-blur": EmptyPayload;
        "six-radio-change": EmptyPayload;
        "six-radio-focus": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixRadioElement extends Components.SixRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixRadioElementEventMap>(type: K, listener: (this: HTMLSixRadioElement, ev: SixRadioCustomEvent<HTMLSixRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixRadioElementEventMap>(type: K, listener: (this: HTMLSixRadioElement, ev: SixRadioCustomEvent<HTMLSixRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixRadioElement: {
        prototype: HTMLSixRadioElement;
        new (): HTMLSixRadioElement;
    };
    interface HTMLSixRangeElementEventMap {
        "six-range-change": EmptyPayload;
        "six-range-blur": EmptyPayload;
        "six-range-focus": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixRangeElement extends Components.SixRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixRangeElementEventMap>(type: K, listener: (this: HTMLSixRangeElement, ev: SixRangeCustomEvent<HTMLSixRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixRangeElementEventMap>(type: K, listener: (this: HTMLSixRangeElement, ev: SixRangeCustomEvent<HTMLSixRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixRangeElement: {
        prototype: HTMLSixRangeElement;
        new (): HTMLSixRangeElement;
    };
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixRootElement extends Components.SixRoot, HTMLStencilElement {
    }
    var HTMLSixRootElement: {
        prototype: HTMLSixRootElement;
        new (): HTMLSixRootElement;
    };
    interface HTMLSixSearchFieldElementEventMap {
        "six-search-field-change": SixSearchFieldChangePayload;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixSearchFieldElement extends Components.SixSearchField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixSearchFieldElementEventMap>(type: K, listener: (this: HTMLSixSearchFieldElement, ev: SixSearchFieldCustomEvent<HTMLSixSearchFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixSearchFieldElementEventMap>(type: K, listener: (this: HTMLSixSearchFieldElement, ev: SixSearchFieldCustomEvent<HTMLSixSearchFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixSearchFieldElement: {
        prototype: HTMLSixSearchFieldElement;
        new (): HTMLSixSearchFieldElement;
    };
    interface HTMLSixSelectElementEventMap {
        "six-select-change": SixSelectChangePayload;
        "six-select-focus": EmptyPayload;
        "six-select-blur": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixSelectElement extends Components.SixSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixSelectElementEventMap>(type: K, listener: (this: HTMLSixSelectElement, ev: SixSelectCustomEvent<HTMLSixSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixSelectElementEventMap>(type: K, listener: (this: HTMLSixSelectElement, ev: SixSelectCustomEvent<HTMLSixSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixSelectElement: {
        prototype: HTMLSixSelectElement;
        new (): HTMLSixSelectElement;
    };
    interface HTMLSixSidebarElementEventMap {
        "six-sidebar-show": EmptyPayload;
        "six-sidebar-after-show": EmptyPayload;
        "six-sidebar-hide": EmptyPayload;
        "six-sidebar-after-hide": EmptyPayload;
        "six-sidebar-initial-focus": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixSidebarElement extends Components.SixSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixSidebarElementEventMap>(type: K, listener: (this: HTMLSixSidebarElement, ev: SixSidebarCustomEvent<HTMLSixSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixSidebarElementEventMap>(type: K, listener: (this: HTMLSixSidebarElement, ev: SixSidebarCustomEvent<HTMLSixSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixSidebarElement: {
        prototype: HTMLSixSidebarElement;
        new (): HTMLSixSidebarElement;
    };
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixSidebarItemElement extends Components.SixSidebarItem, HTMLStencilElement {
    }
    var HTMLSixSidebarItemElement: {
        prototype: HTMLSixSidebarItemElement;
        new (): HTMLSixSidebarItemElement;
    };
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixSidebarItemGroupElement extends Components.SixSidebarItemGroup, HTMLStencilElement {
    }
    var HTMLSixSidebarItemGroupElement: {
        prototype: HTMLSixSidebarItemGroupElement;
        new (): HTMLSixSidebarItemGroupElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixSpinnerElement extends Components.SixSpinner, HTMLStencilElement {
    }
    var HTMLSixSpinnerElement: {
        prototype: HTMLSixSpinnerElement;
        new (): HTMLSixSpinnerElement;
    };
    interface HTMLSixStageIndicatorElement extends Components.SixStageIndicator, HTMLStencilElement {
    }
    var HTMLSixStageIndicatorElement: {
        prototype: HTMLSixStageIndicatorElement;
        new (): HTMLSixStageIndicatorElement;
    };
    interface HTMLSixSwitchElementEventMap {
        "six-switch-blur": boolean;
        "six-switch-change": boolean;
        "six-switch-focus": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixSwitchElement extends Components.SixSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixSwitchElementEventMap>(type: K, listener: (this: HTMLSixSwitchElement, ev: SixSwitchCustomEvent<HTMLSixSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixSwitchElementEventMap>(type: K, listener: (this: HTMLSixSwitchElement, ev: SixSwitchCustomEvent<HTMLSixSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixSwitchElement: {
        prototype: HTMLSixSwitchElement;
        new (): HTMLSixSwitchElement;
    };
    interface HTMLSixTabElementEventMap {
        "six-tab-close": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixTabElement extends Components.SixTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixTabElementEventMap>(type: K, listener: (this: HTMLSixTabElement, ev: SixTabCustomEvent<HTMLSixTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixTabElementEventMap>(type: K, listener: (this: HTMLSixTabElement, ev: SixTabCustomEvent<HTMLSixTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixTabElement: {
        prototype: HTMLSixTabElement;
        new (): HTMLSixTabElement;
    };
    interface HTMLSixTabGroupElementEventMap {
        "six-tab-show": SixTabShowPayload;
        "six-tab-hide": SixTabHidePayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixTabGroupElement extends Components.SixTabGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixTabGroupElementEventMap>(type: K, listener: (this: HTMLSixTabGroupElement, ev: SixTabGroupCustomEvent<HTMLSixTabGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixTabGroupElementEventMap>(type: K, listener: (this: HTMLSixTabGroupElement, ev: SixTabGroupCustomEvent<HTMLSixTabGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixTabGroupElement: {
        prototype: HTMLSixTabGroupElement;
        new (): HTMLSixTabGroupElement;
    };
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixTabPanelElement extends Components.SixTabPanel, HTMLStencilElement {
    }
    var HTMLSixTabPanelElement: {
        prototype: HTMLSixTabPanelElement;
        new (): HTMLSixTabPanelElement;
    };
    interface HTMLSixTagElementEventMap {
        "six-tag-clear": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixTagElement extends Components.SixTag, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixTagElementEventMap>(type: K, listener: (this: HTMLSixTagElement, ev: SixTagCustomEvent<HTMLSixTagElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixTagElementEventMap>(type: K, listener: (this: HTMLSixTagElement, ev: SixTagCustomEvent<HTMLSixTagElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixTagElement: {
        prototype: HTMLSixTagElement;
        new (): HTMLSixTagElement;
    };
    interface HTMLSixTextareaElementEventMap {
        "six-textarea-change": EmptyPayload;
        "six-textarea-input": EmptyPayload;
        "six-textarea-focus": EmptyPayload;
        "six-textarea-blur": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixTextareaElement extends Components.SixTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixTextareaElementEventMap>(type: K, listener: (this: HTMLSixTextareaElement, ev: SixTextareaCustomEvent<HTMLSixTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixTextareaElementEventMap>(type: K, listener: (this: HTMLSixTextareaElement, ev: SixTextareaCustomEvent<HTMLSixTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixTextareaElement: {
        prototype: HTMLSixTextareaElement;
        new (): HTMLSixTextareaElement;
    };
    interface HTMLSixTileElementEventMap {
        "six-tile-closed": EmptyPayload;
        "six-tile-selected": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface HTMLSixTileElement extends Components.SixTile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixTileElementEventMap>(type: K, listener: (this: HTMLSixTileElement, ev: SixTileCustomEvent<HTMLSixTileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixTileElementEventMap>(type: K, listener: (this: HTMLSixTileElement, ev: SixTileCustomEvent<HTMLSixTileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixTileElement: {
        prototype: HTMLSixTileElement;
        new (): HTMLSixTileElement;
    };
    interface HTMLSixTimepickerElementEventMap {
        "six-timepicker-change": SixTimepickerChange;
        "six-timepicker-change-debounced": SixTimepickerChange;
        "six-timepicker-clear": EmptyPayload;
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface HTMLSixTimepickerElement extends Components.SixTimepicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixTimepickerElementEventMap>(type: K, listener: (this: HTMLSixTimepickerElement, ev: SixTimepickerCustomEvent<HTMLSixTimepickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixTimepickerElementEventMap>(type: K, listener: (this: HTMLSixTimepickerElement, ev: SixTimepickerCustomEvent<HTMLSixTimepickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixTimepickerElement: {
        prototype: HTMLSixTimepickerElement;
        new (): HTMLSixTimepickerElement;
    };
    interface HTMLSixTooltipElementEventMap {
        "six-tooltip-show": EmptyPayload;
        "six-tooltip-after-show": EmptyPayload;
        "six-tooltip-hide": EmptyPayload;
        "six-tooltip-after-hide": EmptyPayload;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface HTMLSixTooltipElement extends Components.SixTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSixTooltipElementEventMap>(type: K, listener: (this: HTMLSixTooltipElement, ev: SixTooltipCustomEvent<HTMLSixTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSixTooltipElementEventMap>(type: K, listener: (this: HTMLSixTooltipElement, ev: SixTooltipCustomEvent<HTMLSixTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSixTooltipElement: {
        prototype: HTMLSixTooltipElement;
        new (): HTMLSixTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "six-alert": HTMLSixAlertElement;
        "six-avatar": HTMLSixAvatarElement;
        "six-badge": HTMLSixBadgeElement;
        "six-button": HTMLSixButtonElement;
        "six-card": HTMLSixCardElement;
        "six-checkbox": HTMLSixCheckboxElement;
        "six-datepicker": HTMLSixDatepickerElement;
        "six-details": HTMLSixDetailsElement;
        "six-dialog": HTMLSixDialogElement;
        "six-drawer": HTMLSixDrawerElement;
        "six-dropdown": HTMLSixDropdownElement;
        "six-error": HTMLSixErrorElement;
        "six-error-page": HTMLSixErrorPageElement;
        "six-file-list": HTMLSixFileListElement;
        "six-file-list-item": HTMLSixFileListItemElement;
        "six-file-upload": HTMLSixFileUploadElement;
        "six-footer": HTMLSixFooterElement;
        "six-group-label": HTMLSixGroupLabelElement;
        "six-header": HTMLSixHeaderElement;
        "six-icon": HTMLSixIconElement;
        "six-icon-button": HTMLSixIconButtonElement;
        "six-input": HTMLSixInputElement;
        "six-item-picker": HTMLSixItemPickerElement;
        "six-language-switcher": HTMLSixLanguageSwitcherElement;
        "six-layout-grid": HTMLSixLayoutGridElement;
        "six-main-container": HTMLSixMainContainerElement;
        "six-menu": HTMLSixMenuElement;
        "six-menu-divider": HTMLSixMenuDividerElement;
        "six-menu-item": HTMLSixMenuItemElement;
        "six-menu-label": HTMLSixMenuLabelElement;
        "six-picto": HTMLSixPictoElement;
        "six-progress-bar": HTMLSixProgressBarElement;
        "six-progress-ring": HTMLSixProgressRingElement;
        "six-radio": HTMLSixRadioElement;
        "six-range": HTMLSixRangeElement;
        "six-root": HTMLSixRootElement;
        "six-search-field": HTMLSixSearchFieldElement;
        "six-select": HTMLSixSelectElement;
        "six-sidebar": HTMLSixSidebarElement;
        "six-sidebar-item": HTMLSixSidebarItemElement;
        "six-sidebar-item-group": HTMLSixSidebarItemGroupElement;
        "six-spinner": HTMLSixSpinnerElement;
        "six-stage-indicator": HTMLSixStageIndicatorElement;
        "six-switch": HTMLSixSwitchElement;
        "six-tab": HTMLSixTabElement;
        "six-tab-group": HTMLSixTabGroupElement;
        "six-tab-panel": HTMLSixTabPanelElement;
        "six-tag": HTMLSixTagElement;
        "six-textarea": HTMLSixTextareaElement;
        "six-tile": HTMLSixTileElement;
        "six-timepicker": HTMLSixTimepickerElement;
        "six-tooltip": HTMLSixTooltipElement;
    }
}
declare namespace LocalJSX {
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixAlert {
        /**
          * Set to true to make the alert closable.
         */
        "closable"?: boolean;
        /**
          * The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with the alert before it closes (e.g. moves the mouse over it), the timer will restart.
         */
        "duration"?: number;
        /**
          * Emitted after the alert closes and all transitions are complete.
         */
        "onSix-alert-after-hide"?: (event: SixAlertCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted after the alert opens and all transitions are complete.
         */
        "onSix-alert-after-show"?: (event: SixAlertCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the alert closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSix-alert-hide"?: (event: SixAlertCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the alert opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onSix-alert-show"?: (event: SixAlertCustomEvent<EmptyPayload>) => void;
        /**
          * Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The type of alert.
         */
        "type"?: AlertType;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixAvatar {
        /**
          * Alternative text for the image.
         */
        "alt"?: string;
        /**
          * The image source to use for the avatar.
         */
        "image"?: string;
        /**
          * Initials to use as a fallback when no image is available (1-2 characters max recommended).
         */
        "initials"?: string;
        /**
          * The shape of the avatar.
         */
        "shape"?: 'circle' | 'square' | 'rounded';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixBadge {
        /**
          * Set to true to draw a pill-style badge with rounded edges.
         */
        "pill"?: boolean;
        /**
          * Set to true to make the badge pulsate to draw attention.
         */
        "pulse"?: boolean;
        /**
          * The badge's type.
         */
        "type"?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info' | 'action';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixButton {
        /**
          * Set to true to draw the button with a caret for use with dropdowns, popovers, etc.
         */
        "caret"?: boolean;
        /**
          * Set to true to draw a circle button.
         */
        "circle"?: boolean;
        /**
          * Set to true to disable the button.
         */
        "disabled"?: boolean;
        /**
          * Tells the browser to download the linked file as this filename. Only used when `href` is set.
         */
        "download"?: string;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.
         */
        "href"?: string;
        /**
          * Set to true to draw the button in a loading state.
         */
        "loading"?: boolean;
        /**
          * An optional name for the button. Ignored when `href` is set.
         */
        "name"?: string;
        /**
          * Emitted when the button loses focus.
         */
        "onSix-button-blur"?: (event: SixButtonCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the button gains focus.
         */
        "onSix-button-focus"?: (event: SixButtonCustomEvent<EmptyPayload>) => void;
        /**
          * Set to true to draw a pill-style button with rounded edges.
         */
        "pill"?: boolean;
        /**
          * Indicates if activating the button should reset the form.
         */
        "reset"?: boolean;
        /**
          * The button's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Indicates if activating the button should submit the form. Ignored when `href` is set.
         */
        "submit"?: boolean;
        /**
          * Tells the browser where to open the link. Only used when `href` is set.
         */
        "target"?: '_blank' | '_parent' | '_self' | '_top';
        /**
          * The button's type.
         */
        "type"?: 'secondary' | 'primary' | 'link' | 'success' | 'warning' | 'danger' | 'action';
        /**
          * An optional value for the button. Ignored when `href` is set.
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixCard {
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixCheckbox {
        /**
          * Set to true to draw the checkbox in a checked state.
         */
        "checked"?: boolean;
        /**
          * Set to true to disable the checkbox.
         */
        "disabled"?: boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText"?: string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * Set to true to draw the checkbox in an indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid"?: boolean;
        /**
          * The label text.
         */
        "label"?: string;
        /**
          * The checkbox's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onSix-checkbox-blur"?: (event: SixCheckboxCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onSix-checkbox-change"?: (event: SixCheckboxCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onSix-checkbox-focus"?: (event: SixCheckboxCustomEvent<EmptyPayload>) => void;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required"?: boolean;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixDatepicker {
        /**
          * Callback to determine which date in the datepicker should be selectable. the callback function will get a datestring as an argument, e.g. '2021-07-04'  Usage e.g.: const datepicker = document.getElementById('allowed-date-picker'); datepicker.allowedDates = datestring => parseInt(datestring.split('-')[2], 10) % 2 === 0;
         */
        "allowedDates"?: (date: Date) => boolean;
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable"?: boolean;
        /**
          * Closes the datepicker dropdown after selection
         */
        "closeOnSelect"?: boolean;
        /**
          * The dropdown will close when the user interacts outside of this element (e.g. clicking).
         */
        "containingElement"?: HTMLElement;
        /**
          * Define the dateFormat. Valid formats are: 'dd.mm.yyyy' 'yyyy-mm-dd' 'dd-mm-yyyy' 'dd/mm/yyyy' 'yyyy/mm/dd' 'dd.mm.yy' 'yy-mm-dd' 'dd-mm-yy' 'dd/mm/yy' 'yy/mm/dd'
         */
        "dateFormat"?: SixDateFormats;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `dateChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * The date to defines where the datepicker popup starts. The prop accepts ISO 8601 date strings (YYYY-MM-DD).
         */
        "defaultDate"?: string;
        /**
          * If `true` the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText"?: string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Set the position of the icon
         */
        "iconPosition"?: 'left' | 'right';
        /**
          * Indicates whether or not the calendar should be shown as an inline (always open) component
         */
        "inline"?: boolean;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid"?: boolean;
        /**
          * The label text.
         */
        "label"?: string;
        /**
          * The language used to render the weekdays and months.
         */
        "locale"?: 'en' | 'de' | 'fr' | 'it';
        /**
          * The maximum datetime allowed. Value must be a date object
         */
        "max"?: Date;
        /**
          * The minimum datetime allowed. Value must be a date object
         */
        "min"?: Date;
        /**
          * The input's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when a option got selected.
         */
        "onSix-datepicker-blur"?: (event: SixDatepickerCustomEvent<SixDatepickerSelectPayload>) => void;
        /**
          * Emitted when the clear button is activated.
         */
        "onSix-datepicker-clear"?: (event: SixDatepickerCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when a option got selected.
         */
        "onSix-datepicker-select"?: (event: SixDatepickerCustomEvent<SixDatepickerSelectPayload>) => void;
        /**
          * Indicates whether or not the calendar dropdown is open on startup. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The placeholder defines what text to be shown on the input element
         */
        "placeholder"?: string;
        /**
          * The enforced placement of the dropdown panel.
         */
        "placement"?: 'top' | 'bottom';
        /**
          * If `true` the user can only select a date via the component in the popup, but not directly edit the input field.
         */
        "readonly"?: boolean;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required"?: boolean;
        /**
          * Datepicker size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Set the type.
         */
        "type"?: 'date' | 'date-time';
        /**
          * The value of the form field, which accepts a date object.
         */
        "value"?: Date;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixDetails {
        /**
          * Set to true to prevent the user from toggling the details.
         */
        "disabled"?: boolean;
        /**
          * Set to false when you want to hide the summary icon and disable the open/close mechanism. Usually not needed, but used internally by 'six-sidebar-item-group'
         */
        "hasContent"?: boolean;
        /**
          * Set to true when you want to use six-details inline e.g. in a sidebar
         */
        "inline"?: boolean;
        /**
          * Emitted after the details closes and all transitions are complete.
         */
        "onSix-details-after-hide"?: (event: SixDetailsCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted after the details opens and all transitions are complete.
         */
        "onSix-details-after-show"?: (event: SixDetailsCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the details closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSix-details-hide"?: (event: SixDetailsCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the details opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onSix-details-show"?: (event: SixDetailsCustomEvent<EmptyPayload>) => void;
        /**
          * Indicates whether the details is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * Set to true when you want details without content to be selectable. This is important if you e.g. have a toggled sidebar where some menus have no children
         */
        "selectableEmpty"?: boolean;
        /**
          * The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.
         */
        "summary"?: string;
        /**
          * The summary icon to show in the details header. If you need to display HTML, use the `summary-icon` slot instead.
         */
        "summaryIcon"?: string;
        /**
          * The icon's size.
         */
        "summaryIconSize"?: | 'inherit'
    | 'xSmall'
    | 'small'
    | 'medium'
    | 'large'
    | 'xLarge'
    | 'xxLarge'
    | 'xxxLarge';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixDialog {
        /**
          * The dialog's label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility.
         */
        "label"?: string;
        /**
          * Set to true to disable the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the dialog.
         */
        "noHeader"?: boolean;
        /**
          * Emitted after the dialog closes and all transitions are complete.
         */
        "onSix-dialog-after-hide"?: (event: SixDialogCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted after the dialog opens and all transitions are complete.
         */
        "onSix-dialog-after-show"?: (event: SixDialogCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the dialog closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSix-dialog-hide"?: (event: SixDialogCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the dialog opens and the panel gains focus. Calling `event.preventDefault()` will prevent focus and allow you to set it on a different element in the dialog, such as an input or button.
         */
        "onSix-dialog-initial-focus"?: (event: SixDialogCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the overlay is clicked. Calling `event.preventDefault()` will prevent the dialog from closing.
         */
        "onSix-dialog-overlay-dismiss"?: (event: SixDialogCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the dialog opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onSix-dialog-show"?: (event: SixDialogCustomEvent<EmptyPayload>) => void;
        /**
          * Indicates whether the dialog is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixDrawer {
        /**
          * By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of its parent element, set this prop and add `position: relative` to the parent.
         */
        "contained"?: boolean;
        /**
          * The drawer's label as displayed in the header. You should always include a relevant label even when using `no-header`, as it is required for proper accessibility.
         */
        "label"?: string;
        /**
          * Removes the header. This will also remove the default close button, so please ensure you provide an easy, accessible way for users to dismiss the drawer.
         */
        "noHeader"?: boolean;
        /**
          * Emitted after the drawer closes and all transitions are complete.
         */
        "onSix-drawer-after-hide"?: (event: SixDrawerCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted after the drawer opens and all transitions are complete.
         */
        "onSix-drawer-after-show"?: (event: SixDrawerCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the drawer closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSix-drawer-hide"?: (event: SixDrawerCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the drawer opens and the panel gains focus. Calling `event.preventDefault()` will prevent focus and allow you to set it on a different element in the drawer, such as an input or button.
         */
        "onSix-drawer-initial-focus"?: (event: SixDrawerCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the overlay is clicked. Calling `event.preventDefault()` will prevent the drawer from closing.
         */
        "onSix-drawer-overlay-dismiss"?: (event: SixDrawerCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the drawer opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onSix-drawer-show"?: (event: SixDrawerCustomEvent<EmptyPayload>) => void;
        /**
          * Indicates whether the drawer is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The direction from which the drawer will open.
         */
        "placement"?: 'top' | 'right' | 'bottom' | 'left';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixDropdown {
        /**
          * Set to true to allow async filtering. When you enter something in the search field the component will only emit an event but not filter any elements itself. You can then simply listen to the 'six-async-filter-fired' event to manage the shown menu-items yourself
         */
        "asyncFilter"?: boolean;
        /**
          * By default the search field will be focused when opening a dropdown with filtering enabled.
         */
        "autofocusFilter"?: boolean;
        /**
          * Determines whether the dropdown should hide when a menu item is selected.
         */
        "closeOnSelect"?: boolean;
        /**
          * The dropdown will close when the user interacts outside of this element (e.g. clicking).
         */
        "containingElement"?: HTMLElement;
        /**
          * The panel can be opend/closed by pressing the spacebar or the enter key. In some cases you might want to avoid this
         */
        "disableHideOnEnterAndSpace"?: boolean;
        /**
          * The distance in pixels from which to offset the panel away from its trigger.
         */
        "distance"?: number;
        /**
          * Set to true to allow auto filtering for entries in the dropdown. With this flag the dropdown will automatically filter itsel. If you need to coordinate the shown elements yourself, e.g. because you need to call an endpoint use asyncFilter instead
         */
        "filter"?: boolean;
        /**
          * The debounce for the filter callbacks.
         */
        "filterDebounce"?: number;
        /**
          * The filter's placeholder text.
         */
        "filterPlaceholder"?: string;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Determines if the dropdown panel's width should match the width of the trigger element.  If set to `true`, the panel will resize its width to align with the trigger's width. If `false` or omitted, the panel will maintain its default width.
         */
        "matchTriggerWidth"?: boolean;
        /**
          * Emitted when the async filter is triggered
         */
        "onSix-async-filter-fired"?: (event: SixDropdownCustomEvent<SixDropdownAsyncFilterPayload>) => void;
        /**
          * Emitted after the dropdown closes and all transitions are complete.
         */
        "onSix-dropdown-after-hide"?: (event: SixDropdownCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted after the dropdown opens and all transitions are complete.
         */
        "onSix-dropdown-after-show"?: (event: SixDropdownCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the auto filter is triggered
         */
        "onSix-dropdown-auto-filter-fired"?: (event: SixDropdownCustomEvent<SixDropdownAutoFilterPayload>) => void;
        /**
          * Emitted when the dropdown closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSix-dropdown-hide"?: (event: SixDropdownCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the user scrolls inside dropdown panel.
         */
        "onSix-dropdown-scroll"?: (event: SixDropdownCustomEvent<SixDropdownScrollPayload>) => void;
        /**
          * Emitted when the dropdown opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onSix-dropdown-show"?: (event: SixDropdownCustomEvent<EmptyPayload>) => void;
        /**
          * Indicates whether the dropdown is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * Set the options to be shown in the dropdown (alternative to setting the elements via html)
         */
        "options"?: SixMenuItemData[];
        /**
          * The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel inside the viewport.
         */
        "placement"?: | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * The distance in pixels from which to offset the panel along its trigger.
         */
        "skidding"?: number;
        /**
          * Defines whether the menu list will be rendered virtually i.e. only the elements actually shown (and a couple around) are actually rendered in the DOM. If you use virtual scrolling pass the elements via prop instead of via slot.
         */
        "virtualScroll"?: boolean;
    }
    /**
     * @since 4.0
     * @status beta
     */
    interface SixError {
    }
    interface SixErrorPage {
        /**
          * Defines a custom description.
         */
        "customDescription"?: string[];
        /**
          * Defines a custom icon.
         */
        "customIcon"?: string;
        /**
          * Defines a custom title.
         */
        "customTitle"?: string;
        /**
          * Defines error Code and thus displays the proper error page.
         */
        "errorCode"?: 404 | 403 | 500;
        /**
          * Defines language and thus displays the proper error page in the selected language.
         */
        "language"?: 'en' | 'de';
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixFileList {
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixFileListItem {
        /**
          * The date when the file was uploaded
         */
        "date"?: string;
        /**
          * An id to clearly identify the file
         */
        "identifier"?: string;
        /**
          * The filename
         */
        "name"?: string;
        /**
          * Set to true if you don't want to allow to delete this file
         */
        "nodelete"?: boolean;
        /**
          * Set to true if you don't want to allow to download this file
         */
        "nodownload"?: boolean;
        /**
          * Triggered on file download.
         */
        "onSix-file-list-item-download"?: (event: SixFileListItemCustomEvent<SixFileListDownloadPayload>) => void;
        /**
          * Triggered on file remove.
         */
        "onSix-file-list-item-remove"?: (event: SixFileListItemCustomEvent<SixFileListRemovePayload>) => void;
        /**
          * The file size. This number will be divided by 1024 to show the filesize in KB
         */
        "size"?: number;
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixFileUpload {
        /**
          * Accepted MIME-Types.
         */
        "accept"?: string;
        /**
          * Set to true if file control should be small.
         */
        "compact"?: boolean;
        /**
          * Set when button is disabled.
         */
        "disabled"?: false;
        /**
          * Label of the drop area.
         */
        "label"?: string;
        /**
          * Allowed max file size in bytes.
         */
        "maxFileSize"?: number;
        /**
          * More than one file allowed.
         */
        "multiple"?: false;
        /**
          * Triggers when an uploaded file doesn't match MIME type or max file size.
         */
        "onSix-file-upload-failure"?: (event: SixFileUploadCustomEvent<SixFileUploadFailurePayload>) => void;
        /**
          * Triggers when a file is added.
         */
        "onSix-file-upload-success"?: (event: SixFileUploadCustomEvent<SixFileUploadSuccessPayload>) => void;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixFooter {
    }
    /**
     * @since 1.1
     * @status stable
     */
    interface SixGroupLabel {
        /**
          * Set to true to disable the label.
         */
        "disabled"?: boolean;
        /**
          * The wrapper label's help text. Alternatively, you can use the help-text slot.
         */
        "helpText"?: string;
        /**
          * The wrapper label's label. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required"?: boolean;
        /**
          * The label's size.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixHeader {
        /**
          * Set whether the logo should be clickable
         */
        "clickableLogo"?: boolean;
        /**
          * Set whether the hamburger menu should be visible or not
         */
        "hideHamburgerMenu"?: boolean;
        /**
          * Emitted when the name of the selected app is clicked.
         */
        "onSix-header-app-name-clicked"?: (event: SixHeaderCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when a menu item is in the app switcher menu is selected.
         */
        "onSix-header-app-switcher-select"?: (event: SixHeaderCustomEvent<SixHeaderAppSwitcherSelectPayload>) => void;
        /**
          * Emitted when the hamburger menu is clicked.
         */
        "onSix-header-hamburger-menu-clicked"?: (event: SixHeaderCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the header logo is clicked.
         */
        "onSix-header-logo-clicked"?: (event: SixHeaderCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when a menu item is in the profile menu is selected.
         */
        "onSix-header-profile-select"?: (event: SixHeaderCustomEvent<SixHeaderProfileSelectPayload>) => void;
        /**
          * Emitted when search field is toggled.
         */
        "onSix-header-search-field-toggle"?: (event: SixHeaderCustomEvent<SixHeaderSearchFieldToggle>) => void;
        /**
          * Set the hamburger menu icon to open or closed state
         */
        "openHamburgerMenu"?: boolean;
        /**
          * Set the header search to be in an open or closed state
         */
        "openSearch"?: boolean;
        /**
          * Indicates if content should be shifted down when search field is visible.
         */
        "shiftContent"?: boolean;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixIcon {
        /**
          * If set to true the default material outlined icons are not used.
         */
        "filled"?: boolean;
        /**
          * The icon's size.
         */
        "size"?: | 'inherit'
    | 'xSmall'
    | 'small'
    | 'medium'
    | 'large'
    | 'xLarge'
    | 'xxLarge'
    | 'xxxLarge';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixIconButton {
        /**
          * Set to true to disable the button.
         */
        "disabled"?: boolean;
        /**
          * HTML symbol code or entity.
         */
        "html"?: string;
        /**
          * A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should always include a label that describes what the icon button does.
         */
        "label"?: string;
        /**
          * The name of the icon to draw.
         */
        "name"?: string;
        /**
          * The icon's size.
         */
        "size"?: 'xSmall' | 'small' | 'medium' | 'large' | 'xLarge' | 'xxLarge' | 'xxxLarge';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixInput {
        /**
          * The input's autocaptialize attribute.
         */
        "autocapitalize"?: string;
        /**
          * The input's autocomplete attribute.
         */
        "autocomplete"?: string;
        /**
          * The input's autocorrect attribute.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * The input's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable"?: boolean;
        /**
          * Set to true to disable the input.
         */
        "disabled"?: boolean;
        /**
          * Internal: Styles the input for the dropdown filter search.
         */
        "dropdownSearch"?: boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText"?: string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * The input's help text. Alternatively, you can use the help-text slot.
         */
        "helpText"?: string;
        /**
          * The input's inputmode attribute.
         */
        "inputmode"?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid"?: boolean;
        /**
          * The label text.
         */
        "label"?: string;
        /**
          * Set to render as line
         */
        "line"?: boolean;
        /**
          * The input's maximum value.
         */
        "max"?: number;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength"?: number;
        /**
          * The input's minimum value.
         */
        "min"?: number;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength"?: number;
        /**
          * The input's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus. Access the new value via event.target.value.
         */
        "onSix-input-blur"?: (event: SixInputCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control's value changes. Access the new value via event.target.value.
         */
        "onSix-input-change"?: (event: SixInputCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the clear button is activated.
         */
        "onSix-input-clear"?: (event: SixInputCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onSix-input-focus"?: (event: SixInputCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control receives input. Access the new value via event.target.value.
         */
        "onSix-input-input"?: (event: SixInputCustomEvent<EmptyPayload>) => void;
        /**
          * A pattern to validate input against.
         */
        "pattern"?: string;
        /**
          * Set to true to draw a pill-style input with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Set to true to make the input readonly.
         */
        "readonly"?: boolean;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required"?: boolean;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Enables spell checking on the input.
         */
        "spellcheck"?: boolean;
        /**
          * The input's step attribute.
         */
        "step"?: number;
        /**
          * Set to true to add a password toggle button for password inputs.
         */
        "togglePassword"?: boolean;
        /**
          * The input's type.
         */
        "type"?: 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url';
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixItemPicker {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `six-item-picker-change-debounced` event. If you want your change debounce event to not trigger when keeping the nav button pressed before, make sure debounce is a bit bigger than timeout, otherwise keeping the button pressed will trigger the event twice: once you click (and keep pressed) and once you release
         */
        "debounce"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait between switching to next item when mouse button is held pressed.
         */
        "interval"?: number;
        /**
          * Defines a custom list of items you can iterate through
         */
        "items"?: string[];
        /**
          * The maximum value allowed to pick.
         */
        "max"?: number | string;
        /**
          * The minimum value allowed to pick.
         */
        "min"?: number | string;
        /**
          * Emitted when the item picker's value changes
         */
        "onSix-item-picker-change"?: (event: SixItemPickerCustomEvent<SixItemPickerChangePayload>) => void;
        /**
          * Emitted when the item picker's value changes, but debounced
         */
        "onSix-item-picker-change-debounced"?: (event: SixItemPickerCustomEvent<SixItemPickerChangePayload>) => void;
        /**
          * Defines whether the items should be padded
         */
        "padded"?: boolean;
        /**
          * Defines the character used for padding
         */
        "paddingChar"?: string;
        /**
          * Defines whether the padding should be before or after the value. You can either use 'before' or 'after'. By default, before is selected
         */
        "paddingDirection"?: ItemPickerPaddingDirection;
        /**
          * Defines the length of the padded area
         */
        "paddingLength"?: number;
        /**
          * Define whether the picker should to a roundtrip i.e. start at max when reaching min and vice versa.
         */
        "roundtrip"?: boolean;
        /**
          * Defines how many steps should be taken when navigating
         */
        "step"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger faster switching between items.
         */
        "timeout"?: number;
        /**
          * The type of items you want to rotate through.
         */
        "type"?: ItemPickerType;
        /**
          * The item picker's value attribute.
         */
        "value"?: number | string;
    }
    interface SixLanguageSwitcher {
        /**
          * The languages which should be selectable options.
         */
        "languages"?: string[] | SixLanguageSwitcherInput[];
        /**
          * Emitted when the language switchers value changes
         */
        "onSix-language-switcher-change"?: (event: SixLanguageSwitcherCustomEvent<SixLanguageSwitcherChangePayload>) => void;
        /**
          * The language which should be shown as selected
         */
        "selected"?: string;
    }
    /**
     * @since 1.01
     * @status stable
     */
    interface SixLayoutGrid {
        /**
          * Set the number of grid columns
         */
        "columns"?: number;
    }
    /**
     * @since 1.01
     * @status stable
     */
    interface SixMainContainer {
        /**
          * Set to false to remove top and bottom padding.
         */
        "padded"?: boolean;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixMenu {
        /**
          * Internal: Disables handling of key presses.
         */
        "disableKeyboardHandling"?: boolean;
        /**
          * Used for virtual scrolling Define how many items should be rendered in the DOM when using virtual scrolling
         */
        "itemSize"?: number;
        /**
          * Set the options to be shown in the dropdown
         */
        "items"?: SixMenuItemData1[] | null;
        /**
          * Defines how many items should be shown. If the number of items is larger than this property a scrollbar will be shown
         */
        "itemsShown"?: number;
        /**
          * Emitted when a menu item is selected.
         */
        "onSix-menu-item-selected"?: (event: SixMenuCustomEvent<SixMenuItemSelectedPayload>) => void;
        /**
          * Set to true to remove the box-shadow
         */
        "removeBoxShadow"?: boolean;
        /**
          * Used for virtual scrolling Define the debounce for listening on scrolling changes in milliseconds. The lower the number the more sensitive the component reacts to scrolling changes.
         */
        "scrollingDebounce"?: number;
        /**
          * Defines whether the menu list will be rendered virtually i.e. only the elements actually shown (and a couple around) are actually rendered in the DOM. If you use virtual scrolling pass the elements via prop instead of via slot.
         */
        "virtualScroll"?: boolean;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixMenuDivider {
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixMenuItem {
        /**
          * Defines if the checked state is displayed as a checkbox or a check-icon
         */
        "checkType"?: 'checkbox' | 'check';
        /**
          * Internal: Draws the item in a checked state. CheckType needs to be set to 'checkbox' or 'check' to show the checked state
         */
        "checked"?: boolean;
        /**
          * Set to true to draw the menu item in a disabled state.
         */
        "disabled"?: boolean;
        /**
          * A unique value to store in the menu item. This can be used as a way to identify menu items when selected.
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixMenuLabel {
    }
    /**
     * @since 1.1
     * @status stable
     */
    interface SixPicto {
        /**
          * Defines the size of the icon.
         */
        "size"?: 'xSmall' | 'small' | 'medium' | 'large' | 'xLarge' | 'xxLarge' | 'xxxLarge' | '4xl';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixProgressBar {
        /**
          * When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * The progress bar's percentage, 0 to 100.
         */
        "percentage"?: number;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixProgressRing {
        /**
          * The current progress percentage, 0 - 100.
         */
        "percentage"?: number;
        /**
          * The size of the progress ring in pixels.
         */
        "size"?: number;
        /**
          * The stroke width of the progress ring in pixels.
         */
        "strokeWidth"?: number;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixRadio {
        /**
          * Set to true to draw the radio in a checked state.
         */
        "checked"?: boolean;
        /**
          * Set to true to disable the radio.
         */
        "disabled"?: boolean;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid"?: boolean;
        /**
          * The radio's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onSix-radio-blur"?: (event: SixRadioCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onSix-radio-change"?: (event: SixRadioCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onSix-radio-focus"?: (event: SixRadioCustomEvent<EmptyPayload>) => void;
        /**
          * The radio's value attribute.
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixRange {
        /**
          * Set to true to disable the input.
         */
        "disabled"?: boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText"?: string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * The range's help text. Alternatively, you can use the help-text slot.
         */
        "helpText"?: string;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid"?: boolean;
        /**
          * The label text.
         */
        "label"?: string;
        /**
          * The input's max attribute.
         */
        "max"?: number;
        /**
          * The input's min attribute.
         */
        "min"?: number;
        /**
          * The input's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onSix-range-blur"?: (event: SixRangeCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onSix-range-change"?: (event: SixRangeCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onSix-range-focus"?: (event: SixRangeCustomEvent<EmptyPayload>) => void;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required"?: boolean;
        /**
          * The input's step attribute.
         */
        "step"?: number;
        /**
          * The preferred placedment of the tooltip.
         */
        "tooltip"?: 'top' | 'bottom' | 'none';
        /**
          * A function used to format the tooltip's value.
         */
        "tooltipFormatter"?: (value: number) => string;
        /**
          * The input's value attribute.
         */
        "value"?: number;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixRoot {
        /**
          * Defines whether the content section should be padded
         */
        "padded"?: boolean;
        /**
          * Defines the stage of the application
         */
        "stage"?: StageType;
        /**
          * Defines the version of the application
         */
        "version"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixSearchField {
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable"?: boolean;
        /**
          * Debounce time in milliseconds, default is 300 ms
         */
        "debounce"?: number;
        /**
          * Set to true to disable the input.
         */
        "disabled"?: boolean;
        /**
          * Emitted when a search is triggered
         */
        "onSix-search-field-change"?: (event: SixSearchFieldCustomEvent<SixSearchFieldChangePayload>) => void;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * The input's value attribute.
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixSelect {
        /**
          * Set to true to allow async filtering. When you enter something in the search field the component will only emit an event but not filter any elements itself. You can then simply listen to the 'six-async-filter-fired' event to manage the shown menu-items yourself
         */
        "asyncFilter"?: boolean;
        /**
          * Set to true to turn the six-select into an autocomplete.
         */
        "autocomplete"?: boolean;
        /**
          * Set to true to add a clear button when the select is populated.
         */
        "clearable"?: boolean;
        /**
          * Set to true to disable the select control.
         */
        "disabled"?: boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText"?: string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * Set to true to allow filtering for entries in the dropdown
         */
        "filter"?: boolean;
        /**
          * The debounce for the filter callbacks.
         */
        "filterDebounce"?: number;
        /**
          * The filter's placeholder text.
         */
        "filterPlaceholder"?: string;
        /**
          * The select's help text. Alternatively, you can use the help-text slot.
         */
        "helpText"?: string;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist"?: boolean;
        /**
          * The debounce for when the input changes for autocompletes should be emitted
         */
        "inputDebounce"?: number;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid"?: boolean;
        /**
          * The label text.
         */
        "label"?: string;
        /**
          * Set to render as line
         */
        "line"?: boolean;
        /**
          * The maximum number of tags to show when `multiple` is true. After the maximum, "+n" will be shown to indicate the number of additional items that are selected. Set to -1 to remove the limit.
          * @deprecated : This property is ignored. The component now displays as many items as possible and computes the "+n" dynamically.
         */
        "maxTagsVisible"?: number;
        /**
          * Set to true to enable multiselect.
         */
        "multiple"?: boolean;
        /**
          * The select's name.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onSix-select-blur"?: (event: SixSelectCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control's value changes.
         */
        "onSix-select-change"?: (event: SixSelectCustomEvent<SixSelectChangePayload>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onSix-select-focus"?: (event: SixSelectCustomEvent<EmptyPayload>) => void;
        /**
          * Set the options to be shown in the dropdown (alternative to setting the elements via html)
         */
        "options"?: SixMenuItemData[] | null;
        /**
          * Set to true to draw a pill-style select with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The select's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required"?: boolean;
        /**
          * Enables the select all button.
         */
        "selectAllButton"?: boolean;
        /**
          * Custom text for the "select all" button. Defaults to "Select all" and equivalents in supported languages.
         */
        "selectAllText"?: string;
        /**
          * The select's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the control. This will be a string or an array depending on `multiple`.
         */
        "value"?: string | string[];
        /**
          * Defines whether the menu list will be rendered virtually i.e. only the elements actually shown (and a couple around) are actually rendered in the DOM. If you use virtual scrolling pass the elements via prop instead of via slot.
         */
        "virtualScroll"?: boolean;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixSidebar {
        /**
          * Emitted after the sidebar closes and all transitions are complete.
         */
        "onSix-sidebar-after-hide"?: (event: SixSidebarCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted after the sidebar opens and all transitions are complete.
         */
        "onSix-sidebar-after-show"?: (event: SixSidebarCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the sidebar closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSix-sidebar-hide"?: (event: SixSidebarCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the sidebar opens and the panel gains focus. Calling `event.preventDefault()` will prevent focus and allow you to set it on a different element in the sidebar, such as an input or button.
         */
        "onSix-sidebar-initial-focus"?: (event: SixSidebarCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the sidebar opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onSix-sidebar-show"?: (event: SixSidebarCustomEvent<EmptyPayload>) => void;
        /**
          * Indicates whether the sidebar is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * Sidebar position
         */
        "position"?: 'left' | 'right';
        /**
          * Define whether sidebar is toggled meaning only one menu can be open at the same time
         */
        "toggled"?: boolean;
        /**
          * Sidebar width
         */
        "width"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixSidebarItem {
        /**
          * Set to true to draw the sidebar item in a disabled state.
         */
        "disabled"?: boolean;
        /**
          * Provide if the item should be rendered as anchor tag. Note, that the href is added automatically when using routerLink in Angular.
         */
        "href"?: string | undefined;
        /**
          * Set to true to draw the item in a selected state.
         */
        "selected"?: boolean;
        /**
          * A unique value to store in the sidebar item. This can be used as a way to identify sidebar items when selected.
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixSidebarItemGroup {
        /**
          * Provide if the item should be rendered as anchor tag. Note, that the href is added automatically when using routerLink in Angular.
         */
        "href"?: string | undefined;
        /**
          * Icon of the group
         */
        "icon"?: string;
        /**
          * Title of item group
         */
        "name"?: string;
        /**
          * Indicates whether the sidebar is shown
         */
        "open"?: boolean;
        /**
          * Custom summary icon name.
         */
        "summaryIcon"?: string;
        /**
          * A unique value to store in the sidebar item of the group label. This can be used as a way to identify sidebar items when selected.
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixSpinner {
        /**
          * Indicates if the spinner is shown as animated SIX logo or simple spinner.
         */
        "six"?: boolean;
    }
    interface SixStageIndicator {
        /**
          * The indicators value attribute
         */
        "stage"?: StageType1;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixSwitch {
        /**
          * Set to true to draw the switch in a checked state.
         */
        "checked"?: boolean;
        /**
          * Set to true to disable the switch.
         */
        "disabled"?: boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText"?: string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid"?: boolean;
        /**
          * The label text.
         */
        "label"?: string;
        /**
          * The switch's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onSix-switch-blur"?: (event: SixSwitchCustomEvent<boolean>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onSix-switch-change"?: (event: SixSwitchCustomEvent<boolean>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onSix-switch-focus"?: (event: SixSwitchCustomEvent<EmptyPayload>) => void;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required"?: boolean;
        /**
          * The switch's value attribute.
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTab {
        /**
          * Set to true to draw the tab in an active state.
         */
        "active"?: boolean;
        /**
          * When true, the tab will be rendered with a close icon.
         */
        "closable"?: boolean;
        /**
          * Set to true to draw the tab in a disabled state.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the tab is closable and the close button is activated.
         */
        "onSix-tab-close"?: (event: SixTabCustomEvent<EmptyPayload>) => void;
        /**
          * The name of the tab panel the tab will control. The panel must be located in the same tab group.
         */
        "panel"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTabGroup {
        /**
          * Disables the scroll arrows that appear when tabs overflow.
         */
        "noScrollControls"?: boolean;
        /**
          * Emitted when a tab is hidden.
         */
        "onSix-tab-hide"?: (event: SixTabGroupCustomEvent<SixTabHidePayload>) => void;
        /**
          * Emitted when a tab is shown.
         */
        "onSix-tab-show"?: (event: SixTabGroupCustomEvent<SixTabShowPayload>) => void;
        /**
          * The placement of the tabs.
         */
        "placement"?: 'top' | 'bottom' | 'left' | 'right';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTabPanel {
        /**
          * When true, the tab panel will be shown.
         */
        "active"?: boolean;
        /**
          * The tab panel's name.
         */
        "name"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTag {
        /**
          * Set to true to make the tag clearable.
         */
        "clearable"?: boolean;
        /**
          * Emitted when the clear button is activated.
         */
        "onSix-tag-clear"?: (event: SixTagCustomEvent<EmptyPayload>) => void;
        /**
          * Set to true to draw a pill-style tag with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The tag's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The tag's type.
         */
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'action' | 'text';
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTextarea {
        /**
          * The textarea's autocaptialize attribute.
         */
        "autocapitalize"?: string;
        /**
          * The textarea's autocomplete attribute.
         */
        "autocomplete"?: string;
        /**
          * The textarea's autocorrect attribute.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * The textarea's autofocus attribute.
         */
        "autofocus"?: boolean;
        /**
          * Set to true to disable the textarea.
         */
        "disabled"?: boolean;
        /**
          * The error message shown, if `invalid` is set to true.
         */
        "errorText"?: string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * The textarea's help text. Alternatively, you can use the help-text slot.
         */
        "helpText"?: string;
        /**
          * The textarea's inputmode attribute.
         */
        "inputmode"?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid"?: boolean;
        /**
          * The label text.
         */
        "label"?: string;
        /**
          * The maximum length of input that will be considered valid.
         */
        "maxlength"?: number;
        /**
          * The minimum length of input that will be considered valid.
         */
        "minlength"?: number;
        /**
          * The textarea's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus. Access the new value via event.target.value.
         */
        "onSix-textarea-blur"?: (event: SixTextareaCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control's value changes. Access the new value via event.target.value.
         */
        "onSix-textarea-change"?: (event: SixTextareaCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onSix-textarea-focus"?: (event: SixTextareaCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the control receives input. Access the new value via event.target.value.
         */
        "onSix-textarea-input"?: (event: SixTextareaCustomEvent<EmptyPayload>) => void;
        /**
          * The textarea's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Set to true for a readonly textarea.
         */
        "readonly"?: boolean;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required"?: boolean;
        /**
          * Controls how the textarea can be resized.
         */
        "resize"?: 'none' | 'vertical' | 'auto';
        /**
          * The number of rows to display by default.
         */
        "rows"?: number;
        /**
          * The textarea's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The textarea's spellcheck attribute.
         */
        "spellcheck"?: boolean;
        /**
          * The textarea's value attribute.
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     */
    interface SixTile {
        /**
          * Flag, whether the tile is closeable.
         */
        "closeable"?: boolean;
        /**
          * Enables tile tooltip for tiles
         */
        "disableTooltip"?: boolean;
        /**
          * Set to true to disable the tile.
         */
        "disabled"?: boolean;
        /**
          * Flag, whether the tile should cast a shadow.
         */
        "elevated"?: boolean;
        /**
          * The icon's name.
         */
        "iconName"?: string;
        /**
          * The tile's label.
         */
        "label"?: string;
        /**
          * Emitted when the tile was closed.
         */
        "onSix-tile-closed"?: (event: SixTileCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the tile is selected.
         */
        "onSix-tile-selected"?: (event: SixTileCustomEvent<EmptyPayload>) => void;
        /**
          * The tile's size.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    /**
     * @since 2.0.0
     * @status experimental
     */
    interface SixTimepicker {
        /**
          * Set to true to add a clear button when the input is populated.
         */
        "clearable"?: boolean;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `six-timepicker-change-debounced` event. If you want your change debounce event to not trigger when keeping the nav button pressed before, make sure debounce is a bit bigger than timeout, otherwise keeping the button pressed will trigger the event twice: once you click (and keep pressed) and once you release
         */
        "debounce"?: number;
        /**
          * The defaultTime defines the default setting for the timepicker when you open the popup. Default time must match the provided format.
         */
        "defaultTime"?: string;
        /**
          * If `true` the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * The input's error text. Alternatively, you can use the error-text slot.
         */
        "errorText"?: string | string[];
        /**
          * The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1
         */
        "errorTextCount"?: number;
        /**
          * Define the time format. Valid formats are:  HH:mm:ss hh:mm:ss:aa HH:mm:ss:ms hh:mm:ss:ms:aa HH:mm hh:mm:aa HH hh:aa mm ss ms  where HH is the 24 hour format and hh is the 12 hour format  Please notice that when using the 12-hour-clock (hh) you always need a period indicator (aa). So the time can be parsed as either am or pm
         */
        "format"?: TimeFormat;
        /**
          * Enable this option to prevent the panel from being clipped when the component is placed inside a container with `overflow: auto|scroll`.
         */
        "hoist"?: boolean;
        /**
          * Set the position of the icon
         */
        "iconPosition"?: 'left' | 'right';
        /**
          * Indicates whether the timepicker should be shown as an inline (always open) component
         */
        "inline"?: boolean;
        /**
          * Set the amount of time, in milliseconds, to wait between switching to next timeunit (e.g. next hour) when mouse button is held pressed.
         */
        "interval"?: number;
        /**
          * If this property is set to true and an error message is provided by `errorText`, the error message is displayed.
         */
        "invalid"?: boolean;
        /**
          * The input's label. Alternatively, you can use the label slot.
         */
        "label"?: string;
        /**
          * The input's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the timepicker's value changes
         */
        "onSix-timepicker-change"?: (event: SixTimepickerCustomEvent<SixTimepickerChange>) => void;
        /**
          * Emitted when the timepicker's value changes, but debounced
         */
        "onSix-timepicker-change-debounced"?: (event: SixTimepickerCustomEvent<SixTimepickerChange>) => void;
        /**
          * Emitted when the clear button is activated.
         */
        "onSix-timepicker-clear"?: (event: SixTimepickerCustomEvent<EmptyPayload>) => void;
        /**
          * Indicates whether the timepicker dropdown is open on startup. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The placeholder defines what text to be shown on the input element
         */
        "placeholder"?: string;
        /**
          * The enforced placement of the dropdown panel.
         */
        "placement"?: 'top' | 'bottom';
        /**
          * If `true` the user can only select a time via the timepicker but not directly edit the input field.
         */
        "readonly"?: boolean;
        /**
          * Set to true to show an asterisk beneath the label.
         */
        "required"?: boolean;
        /**
          * Define the separator to be shown between the time unit pickers. Please be aware that this property will modify the displayed separator only. The separator for a timestring is always expected to be a colon (eg. '13:52:20')
         */
        "separator"?: string;
        /**
          * Timepicker size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Set the amount of time, in milliseconds, to wait to trigger faster switching between timeunits (e.g. hours).
         */
        "timeout"?: number;
        /**
          * The value of the timepicker provided as a string. The string mast match the provided format (or default format)
         */
        "value"?: string;
    }
    /**
     * @since 1.0
     * @status stable
     * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
     */
    interface SixTooltip {
        /**
          * The tooltip's content. Alternatively, you can use the content slot.
         */
        "content"?: string;
        /**
          * Set to true to disable the tooltip, so it won't show when triggered.
         */
        "disabled"?: boolean;
        /**
          * The distance in pixels from which to offset the tooltip away from its target.
         */
        "distance"?: number;
        /**
          * Emitted after the tooltip has hidden and all transitions are complete.
         */
        "onSix-tooltip-after-hide"?: (event: SixTooltipCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted after the tooltip has shown and all transitions are complete.
         */
        "onSix-tooltip-after-show"?: (event: SixTooltipCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the tooltip begins to hide. Calling `event.preventDefault()` will prevent it from being hidden.
         */
        "onSix-tooltip-hide"?: (event: SixTooltipCustomEvent<EmptyPayload>) => void;
        /**
          * Emitted when the tooltip begins to show. Calling `event.preventDefault()` will prevent it from being shown.
         */
        "onSix-tooltip-show"?: (event: SixTooltipCustomEvent<EmptyPayload>) => void;
        /**
          * Indicates whether the tooltip is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip inside the viewport.
         */
        "placement"?: | 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * The distance in pixels from which to offset the tooltip along its target.
         */
        "skidding"?: number;
        /**
          * Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple options can be passed by separating them with a space. When manual is used, the tooltip must be activated programmatically.
         */
        "trigger"?: string;
    }
    interface IntrinsicElements {
        "six-alert": SixAlert;
        "six-avatar": SixAvatar;
        "six-badge": SixBadge;
        "six-button": SixButton;
        "six-card": SixCard;
        "six-checkbox": SixCheckbox;
        "six-datepicker": SixDatepicker;
        "six-details": SixDetails;
        "six-dialog": SixDialog;
        "six-drawer": SixDrawer;
        "six-dropdown": SixDropdown;
        "six-error": SixError;
        "six-error-page": SixErrorPage;
        "six-file-list": SixFileList;
        "six-file-list-item": SixFileListItem;
        "six-file-upload": SixFileUpload;
        "six-footer": SixFooter;
        "six-group-label": SixGroupLabel;
        "six-header": SixHeader;
        "six-icon": SixIcon;
        "six-icon-button": SixIconButton;
        "six-input": SixInput;
        "six-item-picker": SixItemPicker;
        "six-language-switcher": SixLanguageSwitcher;
        "six-layout-grid": SixLayoutGrid;
        "six-main-container": SixMainContainer;
        "six-menu": SixMenu;
        "six-menu-divider": SixMenuDivider;
        "six-menu-item": SixMenuItem;
        "six-menu-label": SixMenuLabel;
        "six-picto": SixPicto;
        "six-progress-bar": SixProgressBar;
        "six-progress-ring": SixProgressRing;
        "six-radio": SixRadio;
        "six-range": SixRange;
        "six-root": SixRoot;
        "six-search-field": SixSearchField;
        "six-select": SixSelect;
        "six-sidebar": SixSidebar;
        "six-sidebar-item": SixSidebarItem;
        "six-sidebar-item-group": SixSidebarItemGroup;
        "six-spinner": SixSpinner;
        "six-stage-indicator": SixStageIndicator;
        "six-switch": SixSwitch;
        "six-tab": SixTab;
        "six-tab-group": SixTabGroup;
        "six-tab-panel": SixTabPanel;
        "six-tag": SixTag;
        "six-textarea": SixTextarea;
        "six-tile": SixTile;
        "six-timepicker": SixTimepicker;
        "six-tooltip": SixTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-alert": LocalJSX.SixAlert & JSXBase.HTMLAttributes<HTMLSixAlertElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-avatar": LocalJSX.SixAvatar & JSXBase.HTMLAttributes<HTMLSixAvatarElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-badge": LocalJSX.SixBadge & JSXBase.HTMLAttributes<HTMLSixBadgeElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-button": LocalJSX.SixButton & JSXBase.HTMLAttributes<HTMLSixButtonElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-card": LocalJSX.SixCard & JSXBase.HTMLAttributes<HTMLSixCardElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-checkbox": LocalJSX.SixCheckbox & JSXBase.HTMLAttributes<HTMLSixCheckboxElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-datepicker": LocalJSX.SixDatepicker & JSXBase.HTMLAttributes<HTMLSixDatepickerElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-details": LocalJSX.SixDetails & JSXBase.HTMLAttributes<HTMLSixDetailsElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-dialog": LocalJSX.SixDialog & JSXBase.HTMLAttributes<HTMLSixDialogElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-drawer": LocalJSX.SixDrawer & JSXBase.HTMLAttributes<HTMLSixDrawerElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-dropdown": LocalJSX.SixDropdown & JSXBase.HTMLAttributes<HTMLSixDropdownElement>;
            /**
             * @since 4.0
             * @status beta
             */
            "six-error": LocalJSX.SixError & JSXBase.HTMLAttributes<HTMLSixErrorElement>;
            "six-error-page": LocalJSX.SixErrorPage & JSXBase.HTMLAttributes<HTMLSixErrorPageElement>;
            /**
             * @since 2.0.0
             * @status experimental
             */
            "six-file-list": LocalJSX.SixFileList & JSXBase.HTMLAttributes<HTMLSixFileListElement>;
            /**
             * @since 2.0.0
             * @status experimental
             */
            "six-file-list-item": LocalJSX.SixFileListItem & JSXBase.HTMLAttributes<HTMLSixFileListItemElement>;
            /**
             * @since 2.0.0
             * @status experimental
             */
            "six-file-upload": LocalJSX.SixFileUpload & JSXBase.HTMLAttributes<HTMLSixFileUploadElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-footer": LocalJSX.SixFooter & JSXBase.HTMLAttributes<HTMLSixFooterElement>;
            /**
             * @since 1.1
             * @status stable
             */
            "six-group-label": LocalJSX.SixGroupLabel & JSXBase.HTMLAttributes<HTMLSixGroupLabelElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-header": LocalJSX.SixHeader & JSXBase.HTMLAttributes<HTMLSixHeaderElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-icon": LocalJSX.SixIcon & JSXBase.HTMLAttributes<HTMLSixIconElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-icon-button": LocalJSX.SixIconButton & JSXBase.HTMLAttributes<HTMLSixIconButtonElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-input": LocalJSX.SixInput & JSXBase.HTMLAttributes<HTMLSixInputElement>;
            /**
             * @since 2.0.0
             * @status experimental
             */
            "six-item-picker": LocalJSX.SixItemPicker & JSXBase.HTMLAttributes<HTMLSixItemPickerElement>;
            "six-language-switcher": LocalJSX.SixLanguageSwitcher & JSXBase.HTMLAttributes<HTMLSixLanguageSwitcherElement>;
            /**
             * @since 1.01
             * @status stable
             */
            "six-layout-grid": LocalJSX.SixLayoutGrid & JSXBase.HTMLAttributes<HTMLSixLayoutGridElement>;
            /**
             * @since 1.01
             * @status stable
             */
            "six-main-container": LocalJSX.SixMainContainer & JSXBase.HTMLAttributes<HTMLSixMainContainerElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-menu": LocalJSX.SixMenu & JSXBase.HTMLAttributes<HTMLSixMenuElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-menu-divider": LocalJSX.SixMenuDivider & JSXBase.HTMLAttributes<HTMLSixMenuDividerElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-menu-item": LocalJSX.SixMenuItem & JSXBase.HTMLAttributes<HTMLSixMenuItemElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-menu-label": LocalJSX.SixMenuLabel & JSXBase.HTMLAttributes<HTMLSixMenuLabelElement>;
            /**
             * @since 1.1
             * @status stable
             */
            "six-picto": LocalJSX.SixPicto & JSXBase.HTMLAttributes<HTMLSixPictoElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-progress-bar": LocalJSX.SixProgressBar & JSXBase.HTMLAttributes<HTMLSixProgressBarElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-progress-ring": LocalJSX.SixProgressRing & JSXBase.HTMLAttributes<HTMLSixProgressRingElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-radio": LocalJSX.SixRadio & JSXBase.HTMLAttributes<HTMLSixRadioElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-range": LocalJSX.SixRange & JSXBase.HTMLAttributes<HTMLSixRangeElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-root": LocalJSX.SixRoot & JSXBase.HTMLAttributes<HTMLSixRootElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-search-field": LocalJSX.SixSearchField & JSXBase.HTMLAttributes<HTMLSixSearchFieldElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-select": LocalJSX.SixSelect & JSXBase.HTMLAttributes<HTMLSixSelectElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-sidebar": LocalJSX.SixSidebar & JSXBase.HTMLAttributes<HTMLSixSidebarElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-sidebar-item": LocalJSX.SixSidebarItem & JSXBase.HTMLAttributes<HTMLSixSidebarItemElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-sidebar-item-group": LocalJSX.SixSidebarItemGroup & JSXBase.HTMLAttributes<HTMLSixSidebarItemGroupElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-spinner": LocalJSX.SixSpinner & JSXBase.HTMLAttributes<HTMLSixSpinnerElement>;
            "six-stage-indicator": LocalJSX.SixStageIndicator & JSXBase.HTMLAttributes<HTMLSixStageIndicatorElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-switch": LocalJSX.SixSwitch & JSXBase.HTMLAttributes<HTMLSixSwitchElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-tab": LocalJSX.SixTab & JSXBase.HTMLAttributes<HTMLSixTabElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-tab-group": LocalJSX.SixTabGroup & JSXBase.HTMLAttributes<HTMLSixTabGroupElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-tab-panel": LocalJSX.SixTabPanel & JSXBase.HTMLAttributes<HTMLSixTabPanelElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-tag": LocalJSX.SixTag & JSXBase.HTMLAttributes<HTMLSixTagElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-textarea": LocalJSX.SixTextarea & JSXBase.HTMLAttributes<HTMLSixTextareaElement>;
            /**
             * @since 1.0
             * @status stable
             */
            "six-tile": LocalJSX.SixTile & JSXBase.HTMLAttributes<HTMLSixTileElement>;
            /**
             * @since 2.0.0
             * @status experimental
             */
            "six-timepicker": LocalJSX.SixTimepicker & JSXBase.HTMLAttributes<HTMLSixTimepickerElement>;
            /**
             * @since 1.0
             * @status stable
             * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.
             */
            "six-tooltip": LocalJSX.SixTooltip & JSXBase.HTMLAttributes<HTMLSixTooltipElement>;
        }
    }
}
